import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { createFragmentContainer } from 'react-relay';
import graphql from 'babel-plugin-relay/macro';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Card from '@material-ui/core/Card';
import CardActionArea from '@material-ui/core/CardActionArea';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import Avatar from '@material-ui/core/Avatar';
import { compose } from 'ramda';
import * as PropTypes from 'prop-types';
import truncate from '../../../utils/String';
import inject18n from '../../../components/i18n';

const styles = theme => ({
  card: {
    width: '100%',
    height: '100%',
    backgroundColor: theme.palette.paper.background,
    color: theme.palette.text.main,
    borderRadius: 6,
  },
  cardDummy: {
    width: '100%',
    height: '100%',
    backgroundColor: theme.palette.paper.background,
    color: theme.palette.text.disabled,
    borderRadius: 6,
  },
  avatar: {
    backgroundColor: theme.palette.primary.main,
  },
  avatarDisabled: {
    backgroundColor: theme.palette.text.disabled,
  },
  area: {
    width: '100%',
    height: '100%',
  },
  content: {
    width: '100%',
    height: '100%',
  },
  footer: {
    width: '100%',
    height: 30,
  },
  placeholder: {
    display: 'inline-block',
    height: '1em',
    backgroundColor: theme.palette.text.disabled,
  },
  placeholderDark: {
    display: 'inline-block',
    height: '1em',
    backgroundColor: theme.palette.text.disabledDark,
  },
});

class MalwareCardComponent extends Component {
  render() {
    const {
      t, fsd, classes, malware,
    } = this.props;
    return (
      <Card classes={{ root: classes.card }} raised={true}>
        <CardActionArea classes={{ root: classes.area }} component={Link} to={`/dashboard/malwares/${malware.id}`}>
          <CardHeader
            avatar={<Avatar className={classes.avatar}>{malware.name.charAt(0)}</Avatar>}
            title={malware.name}
            subheader={`${t('Updated the')} ${fsd(malware.modified)}`}
          />
          <CardContent classes={{ root: classes.content }}>
            <Typography component='p'>
              {truncate(malware.description, 200)}
            </Typography>
          </CardContent>
        </CardActionArea>
      </Card>
    );
  }
}

MalwareCardComponent.propTypes = {
  malware: PropTypes.object,
  classes: PropTypes.object,
  t: PropTypes.func,
  fsd: PropTypes.func,
};

const MalwareCardFragment = createFragmentContainer(MalwareCardComponent, {
  malware: graphql`
        fragment MalwareCard_malware on Malware {
            id,
            name,
            description,
            created,
            modified
        }
    `,
});

export const MalwareCard = compose(
  inject18n,
  withStyles(styles),
)(MalwareCardFragment);


class MalwareCardDummyComponent extends Component {
  render() {
    const { classes } = this.props;
    return (
      <Card classes={{ root: classes.cardDummy }} raised={true}>
        <CardActionArea classes={{ root: classes.area }}>
          <CardHeader
            avatar={<Avatar className={classes.avatarDisabled}>D</Avatar>}
            title={<div className={classes.placeholder} style={{ width: '85%' }}/>}
            titleTypographyProps={{ color: 'inherit' }}
            subheader={<div className={classes.placeholderDark} style={{ width: '70%' }}/>}
          />
          <CardContent classes={{ root: classes.content }}>
            <div className={classes.placeholder} style={{ width: '90%' }}/>
            <div className={classes.placeholder} style={{ width: '95%' }}/>
            <div className={classes.placeholder} style={{ width: '90%' }}/>
            <div className={classes.placeholder} style={{ width: '85%' }}/>
          </CardContent>
        </CardActionArea>
      </Card>
    );
  }
}

MalwareCardDummyComponent.propTypes = {
  classes: PropTypes.object,
};

export const MalwareCardDummy = compose(
  inject18n,
  withStyles(styles),
)(MalwareCardDummyComponent);
