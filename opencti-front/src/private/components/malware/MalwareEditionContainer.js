import React, { Component } from 'react';
import PropTypes from 'prop-types';
import graphql from 'babel-plugin-relay/macro';
import { createFragmentContainer, requestSubscription } from 'react-relay';
import {
  compose, insert, find, propEq,
} from 'ramda';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import AppBar from '@material-ui/core/AppBar';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import { Close } from '@material-ui/icons';
import Avatar from '@material-ui/core/Avatar';
import inject18n from '../../../components/i18n';
import MalwareEditionOverview from './MalwareEditionOverview';
import environment from '../../../relay/environment';

const styles = theme => ({
  header: {
    backgroundColor: theme.palette.navAlt.backgroundHeader,
    padding: '20px 20px 20px 60px',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    left: 5,
  },
  importButton: {
    position: 'absolute',
    top: 15,
    right: 20,
  },
  container: {
    padding: '10px 20px 20px 20px',
  },
  appBar: {
    width: '100%',
    zIndex: theme.zIndex.drawer + 1,
    backgroundColor: theme.palette.navAlt.background,
    color: theme.palette.header.text,
    borderBottom: '1px solid #5c5c5c',
  },
});

const subscription = graphql`
  subscription MalwareEditionContainerSubscription($id: ID!) {
    malware(id: $id) {
      ...MalwareEditionContainer_malware
    }
  }
`;

class MalwareEditionContainer extends Component {
  constructor(props) {
    super(props);
    this.state = { currentTab: 0 };
  }

  componentDidMount() {
    const sub = requestSubscription(
      environment,
      {
        subscription,
        variables: {
          // eslint-disable-next-line
          id: this.props.malware.__id,
        },
        onError: error => console.log(error),

      },
    );
    this.setState({
      sub,
    });
  }

  componentWillUnmount() {
    this.state.sub.dispose();
  }

  handleChangeTab(event, value) {
    this.setState({ currentTab: value });
  }

  render() {
    const {
      t, classes, handleClose, malware, me,
    } = this.props;
    const { editContext } = malware;
    console.log('editContext', editContext);
    // Add current user to the context if is not available yet.
    const missingMe = find(propEq('username', me.email))(editContext) === undefined;
    const editUsers = missingMe ? insert(0, { username: me.email }, editContext) : editContext;
    return (
      <div>
        <div className={classes.header}>
          <IconButton aria-label='Close' className={classes.closeButton} onClick={handleClose.bind(this)}>
            <Close fontSize='small'/>
          </IconButton>
          <Typography variant='h6'>
            {t('Update a malware')}
          </Typography>
          {editUsers.map((object, i) => <div key={i} ><Avatar className={classes.avatar}>
            {object.username.charAt(0)}
          </Avatar>
            focusOn: {object.focusOn} - isTyping: {object.isTyping ? 'true' : 'false'}
          </div>)}
        </div>
        <div className={classes.container}>
          <AppBar position='static' elevation={0} className={classes.appBar}>
            <Tabs value={this.state.currentTab} onChange={this.handleChangeTab.bind(this)}>
              <Tab label={t('Overview')}/>
              <Tab label={t('Observables')}/>
              <Tab label={t('Relationships')}/>
            </Tabs>
          </AppBar>
          {this.state.currentTab === 0 && <MalwareEditionOverview malware={this.props.malware}/>}
        </div>
      </div>
    );
  }
}

const MalwareEditionFragment = createFragmentContainer(MalwareEditionContainer, {
  malware: graphql`
    fragment MalwareEditionContainer_malware on Malware {
      ...MalwareEditionOverview_malware
      editContext {
        username
        focusOn
        isTyping
      }
    }
  `,
  me: graphql`
    fragment MalwareEditionContainer_me on User {
      email
    }
  `,
});

MalwareEditionContainer.propTypes = {
  handleClose: PropTypes.func,
  classes: PropTypes.object,
  malware: PropTypes.object,
  me: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
};

export default compose(
  inject18n,
  withStyles(styles, { withTheme: true }),
)(MalwareEditionFragment);
