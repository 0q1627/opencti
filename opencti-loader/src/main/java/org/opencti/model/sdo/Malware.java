package org.opencti.model.sdo;

import org.opencti.model.database.LoaderDriver;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static java.lang.String.format;
import static org.opencti.model.database.BaseQuery.from;

public class Malware extends Domain {

    //Nothing
    @Override
    public void grakn(LoaderDriver driver) {
        String type = this.getClass().getSimpleName();
        Object malware = driver.execute(from(format("match $m isa %s has stix_id %s; get;", type, prepare(getId()))));
        if (malware == null) { //Only create if the malware doesn't exists
            StringBuilder query = new StringBuilder();
            query.append("insert $m isa Malware has stix_id ").append(prepare(getId()));
            query.append(" has name ").append(prepare(getName()));
            if (getLabelChain() != null) query.append(getLabelChain());
            if (getDescription() != null) query.append(" has description ").append(prepare(getDescription()));
            query.append(" has revoked ").append(getRevoked());
            query.append(" has created ").append(getCreated());
            query.append(";");
            driver.execute(from(query.toString()));
        }

        //Create the created_ref
        if (getCreated_by_ref() != null) {
            Object identity = driver.execute(from(format("match $m isa Identity has stix_id %s; get;",
                    prepare(getCreated_by_ref()))));
            if (identity == null) {
                String identityCreation = format("insert $m isa Identity has stix_id %s;",
                        prepare(getCreated_by_ref()));
                driver.execute(from(identityCreation));
            }
            //Create relation
            String getRelation = format("match $m isa Malware has stix_id %s; " +
                            "$i isa Identity has stix_id %s; " +
                            "(creator: $i, so: $m) isa created_by_ref; offset 0; limit 1; get;",
                    prepare(getId()),
                    prepare(getCreated_by_ref()));
            Object relation = driver.execute(from(getRelation));

            if (relation == null) {
                //match $p1 has identifier "Titus Groan"; $p2 has identifier "Fuchsia Groan"; insert (spouse: $p1, spouse: $p2) isa marriage;
                String relationCreation = format("match $m isa Malware has stix_id %s; " +
                                "$i isa Identity has stix_id %s; " +
                                "insert (creator: $i, so: $m) isa created_by_ref;",
                        prepare(getId()),
                        prepare(getCreated_by_ref()));
                driver.execute(from(relationCreation));
            }
        }

        //External refs
        if (getExternal_references() != null) {
            getExternal_references()
                    .stream()
                    .filter(ref -> ref.getUrl() != null && ref.getSource_name() != null)
                    .forEach(ref -> {
                        //Must have same external_id / url  and source_name
                        StringBuilder getReference = new StringBuilder("$ref isa External-Reference ");
                        if (ref.getExternal_id() != null)
                            getReference.append(format("has external_id %s ", prepare(ref.getExternal_id())));
                        if (ref.getSource_name() != null)
                            getReference.append(format("has source_name %s ", prepare(ref.getSource_name())));
                        if (ref.getUrl() != null) getReference.append(format("has url %s ", prepare(ref.getUrl())));

                        Object externalRef = driver.execute(from("match " + getReference.toString() + "; get;"));
                        if (externalRef == null) {
                            StringBuilder refBuilder = new StringBuilder();
                            refBuilder.append("insert $ref isa External-Reference")
                                    .append(" has stix_id ").append(prepare("external-reference--" + UUID.randomUUID().toString()));
                            if (ref.getExternal_id() != null)
                                refBuilder.append(" has external_id ").append(prepare(ref.getExternal_id()));
                            refBuilder.append(" has source_name ").append(prepare(ref.getSource_name()));
                            if (ref.getDescription() != null)
                                refBuilder.append(" has description ").append(prepare(ref.getDescription()));
                            refBuilder.append(" has url ").append(prepare(ref.getUrl()));
                            refBuilder.append(";");
                            driver.execute(from(refBuilder.toString()));
                        }

                        //Create relation
                        String getRefRelation = format("match $m isa Malware " +
                                        "has stix_id %s; " +
                                        "%s; " +
                                        "(external_reference: $ref, so: $m) isa external_references; offset 0; limit 1; get;",
                                prepare(getId()),
                                getReference.toString());
                        Object refRelation = driver.execute(from(getRefRelation));
                        if (refRelation == null) {
                            //match $p1 has identifier "Titus Groan"; $p2 has identifier "Fuchsia Groan"; insert (spouse: $p1, spouse: $p2) isa marriage;
                            String relationCreation = format("match $m isa Malware " +
                                            "has stix_id %s; " +
                                            "%s; " +
                                            "insert (external_reference: $ref, so: $m) isa external_references;",
                                    prepare(getId()),
                                    getReference.toString());
                            driver.execute(from(relationCreation));
                        }
                    });
        }
    }

    private String name;
    private String description;
    private List<Reference> external_references = new ArrayList<>();

    //region fields
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public List<Reference> getExternal_references() {
        return external_references;
    }

    public void setExternal_references(List<Reference> external_references) {
        this.external_references = external_references;
    }

    //endregion
}
