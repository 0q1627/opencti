import React, {Component} from 'react';
import {createPaginationContainer} from "react-relay";
import graphql from 'babel-plugin-relay/macro';
import {withStyles} from '@material-ui/core/styles';
import MalwareLine from "./MalwareLine";
import {AutoSizer, InfiniteLoader, List, WindowScroller} from "react-virtualized";

const styles = () => ({
  windowScrollerWrapper: {
    flex: '1 1 auto'
  },
  item: {
    paddingLeft: 10,
    textTransform: 'uppercase',
    cursor: 'pointer'
  },
  title: {
    float: 'left'
  },
  search: {
    float: 'right',
    marginTop: '-10px'
  }
})

class MalwaresLines extends Component {
  constructor(props) {
    super(props);
    this._isRowLoaded = this._isRowLoaded.bind(this);
    this._loadMore = this._loadMore.bind(this);
    this._rowRenderer = this._rowRenderer.bind(this);
    this.state = {
      scrollToIndex: -1,
      showHeaderText: true,
    };
  }

  _setRef = windowScroller => {
    this._windowScroller = windowScroller;
  };

  _loadMore() {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      console.log('No more to load', this.props.relay.hasMore(), this.props.relay.isLoading())
      return;
    }

    this.props.relay.loadMore(
      25,  // Fetch the next 10 feed items
      error => {
        console.log(error);
      },
    );
  }

  _isRowLoaded({index}) {
    const list = this.props.data.malwares.edges;
    return !this.props.relay.hasMore() || index < list.length;
  }

  _rowRenderer({index, key, style}) {
    const list = this.props.data.malwares.edges;
    if (!this._isRowLoaded({index})) {
      return <div key={key}>'Loading...'</div>
    } else {
      const malware = list[index].node;
      return <div key={key} style={style}><MalwareLine key={malware.id} malware={malware}/></div>
    }
  }

  render() {
    const list = this.props.data.malwares.edges;
    const rowCount = this.props.relay.hasMore() ? list.length + 1 : list.length;
    const {scrollToIndex} = this.state;
    return (
      <WindowScroller ref={this._setRef} scrollElement={window}>
        {({height, isScrolling, registerChild, onChildScroll, scrollTop}) => (
          <div className={styles.windowScrollerWrapper}>
            <InfiniteLoader isRowLoaded={this._isRowLoaded} loadMoreRows={this._loadMore} rowCount={rowCount}>
              {({onRowsRendered, registerChild}) => (
                <AutoSizer disableHeight>
                  {({width}) => (
                    <List ref={el => {
                      window.listEl = el;
                    }}
                          autoHeight
                          className={styles.List}
                          height={height}
                          onRowsRendered={onRowsRendered}
                          isScrolling={isScrolling}
                          onScroll={onChildScroll}
                          overscanRowCount={2}
                          rowCount={rowCount}
                          rowHeight={45}
                          rowRenderer={this._rowRenderer}
                          scrollToIndex={scrollToIndex}
                          scrollTop={scrollTop}
                          width={width}
                    />
                  )}
                </AutoSizer>
              )}
            </InfiniteLoader>
          </div>
        )}
      </WindowScroller>
    );
  }

}

export default withStyles(styles)(createPaginationContainer(
  MalwaresLines,
  {
    data: graphql`
        fragment MalwaresLines_data on Query @argumentDefinitions(
            count: {type: "Int", defaultValue: 25}
            cursor: {type: "ID"}
            orderBy: {type: "MalwaresOrdering", defaultValue: ID}
        ) {
            malwares(
                first: $count
                after: $cursor
                orderBy: $orderBy # Non-pagination variables
            ) @connection(key: "Pagination_malwares") {
                edges {
                    node {
                        id
                        ...MalwareLine_malware
                    }
                }
            }
        }
    `,
  },
  {
    direction: 'forward',
    getConnectionFromProps(props) {
      return props.data && props.data.malwares;
    },
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, {count, cursor}, fragmentVariables) {
      return {
        count,
        cursor,
        orderBy: fragmentVariables.orderBy
      };
    },
    query: graphql`
        query MalwaresLinesPaginationQuery($count: Int!, $cursor: ID, $orderBy: MalwaresOrdering) {
            ...MalwaresLines_data @arguments(count: $count, cursor: $cursor, orderBy: $orderBy)
        }
    `
  }
));