import React, { Component } from 'react';
import PropTypes from 'prop-types';
import graphql from 'babel-plugin-relay/macro';
import { createFragmentContainer, requestSubscription } from 'react-relay';
import { Formik, Field, Form } from 'formik';
import { withStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import { compose } from 'ramda';
import * as Yup from 'yup';
import inject18n from '../../../components/i18n';
import Autocomplete from '../../../components/Autocomplete';
import TextField from '../../../components/TextField';
import environment from '../../../relay/environment';

// TODO: Replace by graphQL request result
const markingDefinitions = [
  { value: 'TLP:WHITE', label: 'TLP:WHITE' },
  { value: 'TLP:GREEN', label: 'TLP:GREEN' },
  { value: 'TLP:AMBER', label: 'TLP:AMBER' },
  { value: 'TLP:RED', label: 'TLP:RED' },
];

const killchainPhases = [
  { value: 'mitre-attack-defense-evation', label: '[MITRE Att&ck] Defense evasion' },
  { value: 'mitre-attack-persistence', label: '[MITRE Att&ck] Persistence' },
  { value: 'mitre-attack-initial-access', label: '[MITRE Att&ck] Initial access' },
  { value: 'nsa-initial-access', label: '[NSA] Initial access' },
];

const styles = theme => ({
  drawerPaper: {
    minHeight: '100vh',
    width: '50%',
    position: 'fixed',
    overflow: 'hidden',
    backgroundColor: theme.palette.navAlt.background,
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
    padding: '30px 30px 30px 30px',
  },
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
  buttons: {
    marginTop: 20,
    textAlign: 'right',
  },
  button: {
    marginLeft: theme.spacing.unit * 2,
  },
  importButton: {
    position: 'absolute',
    top: 30,
    right: 30,
  },
});

const subscription = graphql`
  subscription MalwareEditionOverviewSubscription($id: ID!) {
    malwareEdit(id: $id) {
      ...MalwareEditionOverview_malware
    }
  }
`;


const malwareValidation = t => Yup.object().shape({
  name: Yup.string()
    .required(t('This field is required')),
  description: Yup.string()
    .min(3, t('The value is too short'))
    .max(500, t('The value is too long'))
    .required(t('This field is required')),
});

class MalwareEditionOverviewComponent extends Component {
  componentDidMount() {
    const sub = requestSubscription(
      environment,
      {
        subscription,
        variables: {
          id: this.props.malware.id,
        },
        onError: error => console.error(error),
      },
    );
    this.setState({
      sub,
    });
  }

  componentWillUnmount() {
    this.state.sub.dispose();
  }

  searchMarkingDefinitions(event) {
    // TODO: Search in GraphQL
    console.log(event.target.value);
  }

  searchKillchainPhases(event) {
    // TODO: Search in GraphQL
    console.log(event.target.value);
  }

  onSubmit(values, { setSubmitting, resetForm, setErrors }) {
    console.log(values);
  }

  handleChangeName(event) {
    console.log(event);
  }

  handleChangeDescription(event) {
    console.log(event);
  }

  handleChangeKillchainPhases(event) {
    console.log(event);
  }

  handleChangeMarkingDefinitions(event) {
    console.log(event);
  }

  render() {
    const { t, classes, malware } = this.props;
    console.log(malware.editContext);
    return (
      <div>
        <Formik
          initialValues={malware}
          validationSchema={malwareValidation(t)}
          onSubmit={this.onSubmit.bind(this)}
          render={({ submitForm, isSubmitting }) => (
            <Form style={{ margin: '20px 0 20px 0' }}>
              <Field name='name' component={TextField} label={t('Name')} fullWidth={true} onChange={this.handleChangeName.bind(this)}/>
              <Field name='description' component={TextField} label={t('Description')}
                     fullWidth={true} multiline={true} rows='4' style={{ marginTop: 20 }} onChange={this.handleChangeDescription.bind(this)}/>
              <Field
                name='killchain_phases'
                component={Autocomplete}
                label={t('Killchain phases')}
                options={killchainPhases}
                onInputChange={this.searchKillchainPhases.bind(this)}
                onChange={this.handleChangeKillchainPhases.bind(this)}
              />
              <Field
                name='marking_definitions'
                component={Autocomplete}
                label={t('Marking')}
                options={markingDefinitions}
                onInputChange={this.searchMarkingDefinitions.bind(this)}
                onChange={this.handleChangeMarkingDefinitions.bind(this)}
              />
              <div className={classes.buttons}>
                <Button variant='contained' color='primary' onClick={submitForm} disabled={isSubmitting} classes={{ root: classes.button }}>
                  {t('Update')}
                </Button>
              </div>
            </Form>
          )}
        />
      </div>
    );
  }
}

MalwareEditionOverviewComponent.propTypes = {
  classes: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
  malware: PropTypes.object,
};

const MalwareEditionOverview = createFragmentContainer(MalwareEditionOverviewComponent, {
  malware: graphql`
      fragment MalwareEditionOverview_malware on Malware {
          id,
          name,
          description
          editContext {
            username
            focusOn
            isTyping
          }
      }
  `,
});

export default compose(
  inject18n,
  withStyles(styles, { withTheme: true }),
)(MalwareEditionOverview);
