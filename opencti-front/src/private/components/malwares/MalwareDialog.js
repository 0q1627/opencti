import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { Formik, Field, Form } from 'formik';
import { TextField } from 'formik-material-ui';
import { withStyles } from '@material-ui/core/styles';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogActions from '@material-ui/core/DialogActions';
import Button from '@material-ui/core/Button';
import { Add } from '@material-ui/icons';
import { compose } from 'ramda';
import inject18n from '../../../components/i18n';

const styles = () => ({
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
});

class MalwareDialog extends Component {
  constructor(props) {
    super(props);
    this.state = { open: false };
  }

  handleOpen() {
    this.setState({ open: true });
  }

  handleClose() {
    this.setState({ open: false });
  }

  onSubmit(values, { setSubmitting, resetForm }) {
    setTimeout(() => {
      setSubmitting(false);
      resetForm();
      this.handleClose();
    }, 500);
  }

  onReset() {
    this.handleClose();
  }

  render() {
    const {
      t, classes, variant, malwareId,
    } = this.props;
    let controlElement = '';
    switch (variant) {
      case 'button':
        controlElement = <Button onClick={this.handleOpen.bind(this)} color='primary'>{t('Create')}</Button>;
        break;
      default:
        controlElement = <Button onClick={this.handleOpen.bind(this)} variant='fab' color='secondary' aria-label='Add' className={classes.createButton}><Add/></Button>;
    }

    return (
      <div>
        {controlElement}
        <Formik
          initialValues={{ name: '', description: '' }}
          validate={(values) => {
            const errors = {};
            if (!values.name) {
              errors.name = t('This field is required');
            }
            return errors;
          }}
          onSubmit={this.onSubmit.bind(this)}
          onReset={this.onReset.bind(this)}
          render={({ submitForm, handleReset, isSubmitting }) => (
            <Dialog
              open={this.state.open}
              keepMounted={true}
              fullWidth={true}
              onClose={this.handleClose.bind(this)}
            >
              <DialogTitle>
                {malwareId ? t('Update a malware') : t('Create a malware')}
              </DialogTitle>
              <DialogContent>
                <Form>
                  <Field name='name' component={TextField} label={t('Name')} fullWidth={true}/>
                  <Field name='description' component={TextField} label={t('Description')} fullWidth={true} multiline={true} rows='4' style={{ marginTop: 20 }}/>
                </Form>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleReset} color='primary' disabled={isSubmitting}>
                  {t('Cancel')}
                </Button>
                <Button onClick={submitForm} color='primary' disabled={isSubmitting}>
                  {malwareId ? t('Update') : t('Create')}
                </Button>
              </DialogActions>
            </Dialog>
          )}
        />
      </div>
    );
  }
}

MalwareDialog.propTypes = {
  variant: PropTypes.string,
  malwareId: PropTypes.string,
  classes: PropTypes.object,
  t: PropTypes.func,
};

export default compose(
  inject18n,
  withStyles(styles),
)(MalwareDialog);
