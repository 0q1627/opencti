import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { Formik, Field, Form } from 'formik';
import { TextField } from 'formik-material-ui';
import { withStyles } from '@material-ui/core/styles';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogActions from '@material-ui/core/DialogActions';
import Button from '@material-ui/core/Button';
import { Add } from '@material-ui/icons';
import { compose, head } from 'ramda';
import * as Yup from 'yup';
import graphql from 'babel-plugin-relay/macro';
import { commitMutation } from 'react-relay';
import { ConnectionHandler } from 'relay-runtime';
import inject18n from '../../../components/i18n';
import environment from '../../../relay/environment';

const styles = () => ({
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
});

const malwareMutation = graphql`
    mutation MalwareDialogMutation($input: MalwareAddInput!) {
      malwareAdd(input: $input) {
        malwareEdge {
            node {
                ...MalwareCard_malware
            }
            cursor
        }
        viewer {
            id
        }
      }
    }
`;

const malwareValidation = t => Yup.object().shape({
  name: Yup.string()
    .required(t('This field is required')),
  description: Yup.string()
    .min(6, t('Too Short!'))
    .max(100, t('Too Long!'))
    .required(t('This field is required')),
});

const sharedUpdater = (store, userId, orderBy, newEdge) => {
  const userProxy = store.get(userId);
  const conn = ConnectionHandler.getConnection(
    userProxy,
    'Pagination_malwares',
    { orderBy },
  );
  ConnectionHandler.insertEdgeBefore(conn, newEdge);
};

class MalwareDialog extends Component {
  constructor(props) {
    super(props);
    this.state = { open: false };
  }

  handleOpen() {
    this.setState({ open: true });
  }

  handleClose() {
    this.setState({ open: false });
  }

  onSubmit(values, { setSubmitting, resetForm, setErrors }) {
    commitMutation(environment, {
      mutation: malwareMutation,
      variables: {
        input: values,
      },
      updater: (store) => {
        const payload = store.getRootField('malwareAdd');
        const newEdge = payload.getLinkedRecord('malwareEdge');
        const container = store.getRoot();
        sharedUpdater(store, container.getDataID(), this.props.orderBy, newEdge);
      },
      /* optimisticUpdater: (store) => {
        const root = store.getRoot();
        const user = root.getLinkedRecord('me');
        const id = Math.floor(Math.random() * 999999) + 100000;
        const node = store.create(`client:newMalware:V${id}`, 'Malware');
        node.setValue(`client:newMalware:V${id}`, 'id');
        node.setValue('YOOOOOOOOOOOOOOOOOOOO', 'name');
        node.setValue(values.description, 'description');
        const newEdge = store.create(`client:newEdge:V${id}`, 'malwareEdge');
        newEdge.setLinkedRecord(node, 'node');
        sharedUpdater(store, user.getDataID(), this.props.orderBy, newEdge);
      }, */
      onCompleted: (response, errors) => {
        setSubmitting(false);
        if (errors) {
          const error = this.props.t(head(errors).message);
          setErrors({ name: error }); // Push the error in the name field
        } else {
          resetForm();
          this.handleClose();
        }
      },
    });
  }

  onReset() {
    this.handleClose();
  }

  render() {
    const {
      t, classes, variant, malwareId,
    } = this.props;
    let controlElement = '';
    switch (variant) {
      case 'button':
        controlElement = <Button onClick={this.handleOpen.bind(this)}
                                 color='primary'>{t('Create')}</Button>;
        break;
      default:
        controlElement = <Button onClick={this.handleOpen.bind(this)}
                                 variant='fab' color='secondary' aria-label='Add'
                                 className={classes.createButton}><Add/></Button>;
    }

    return (
      <div>
        {controlElement}
        <Formik
          initialValues={{ name: '', description: '' }}
          validationSchema={malwareValidation(t)}
          onSubmit={this.onSubmit.bind(this)}
          onReset={this.onReset.bind(this)}
          render={({ submitForm, handleReset, isSubmitting }) => (
            <Dialog
              open={this.state.open}
              keepMounted={true}
              fullWidth={true}
              onClose={this.handleClose.bind(this)}>
              <DialogTitle>
                {malwareId ? t('Update a malware') : t('Create a malware')}
              </DialogTitle>
              <DialogContent>
                <Form>
                  <Field name='name' component={TextField} label={t('Name')} fullWidth={true}/>
                  <Field name='description' component={TextField} label={t('Description')}
                         fullWidth={true} multiline={true} rows='4' style={{ marginTop: 20 }}/>
                </Form>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleReset} color='primary' disabled={isSubmitting}>
                  {t('Cancel')}
                </Button>
                <Button onClick={submitForm} color='primary' disabled={isSubmitting}>
                  {malwareId ? t('Update') : t('Create')}
                </Button>
              </DialogActions>
            </Dialog>
          )}
        />
      </div>
    );
  }
}

MalwareDialog.propTypes = {
  orderBy: PropTypes.string,
  variant: PropTypes.string,
  malwareId: PropTypes.string,
  classes: PropTypes.object,
  t: PropTypes.func,
};

export default compose(
  inject18n,
  withStyles(styles),
)(MalwareDialog);
