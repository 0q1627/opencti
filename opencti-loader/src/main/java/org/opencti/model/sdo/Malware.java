package org.opencti.model.sdo;

import org.opencti.model.StixBase;
import org.opencti.model.StixElement;
import org.opencti.model.database.GraknRelation;
import org.opencti.model.database.LoaderDriver;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.lang.String.format;
import static org.opencti.model.database.BaseQuery.from;
import static org.opencti.model.utils.StixUtils.prepare;

public class Malware extends Domain {

    @Override
    public boolean isImplemented() {
        return true;
    }

    @Override
    public void neo4j(LoaderDriver driver, Map<String, StixBase> stixElements) {
          String type = this.getClass().getSimpleName();
        String name = type.toLowerCase();
        //Create a new domain
        String query = "MERGE (" + name + ":" + type + " { id: $id }) " +
                "ON CREATE SET " + name + " = {" +
                /**/"id: $id, " +
                /**/"created: $created, " +
                /**/"modified: $modified " +
                "} " +
                "ON MATCH SET " +
                /**/name + ".created = $created, " +
                /**/name + ".modified = $modified";
        driver.execute(from(query).withParams("id", getId(),
                "created", getCreated(),
                "modified", getModified()));

        //Create the created_ref
        if (getCreated_by_ref() != null) {
            String identityQuery = "MERGE (identity:Identity {id: $identityId}) ON CREATE SET identity={id: $identityId}";
            driver.execute(from(identityQuery).withParams("identityId", getCreated_by_ref()));
            String relationQuery = "MATCH (" + name + ":" + type + " {id: $nameId}), (identity:Identity {id: $identityId}) " +
                    "MERGE (" + name + ")-[:created_by]->(identity)";
            driver.execute(from(relationQuery).withParams("nameId", getId(), "identityId", getCreated_by_ref()));

        }
        //Marking refs
        if (getObject_marking_refs() != null) {
            getObject_marking_refs().forEach(marking -> {
                //Create entity
                String markingQuery = "MERGE (marking:MarkingDefinition {id: $markingId}) ON CREATE SET marking={id: $markingId}";
                driver.execute(from(markingQuery).withParams("markingId", marking));
                //Create relation
                String markingRelationQuery = "MATCH (" + name + ":" + type + " {id: $nameId}), (marking:MarkingDefinition {id: $markingId}) " +
                        "MERGE (" + name + ")-[:object_marking]->(marking)";
                driver.execute(from(markingRelationQuery).withParams("nameId", getId(), "markingId", marking));
            });
        }
    }

    //Nothing
    @Override
    public void grakn(LoaderDriver driver, Map<String, StixBase> stixElements) {
        String type = this.getClass().getSimpleName();
        Object malware = driver.execute(from(format("match $m isa %s has stix_id %s; get;", type, prepare(getId()))));
        if (malware == null) { //Only create if the malware doesn't exists
            StringBuilder query = new StringBuilder();
            query.append("insert $m isa Malware has stix_id ").append(prepare(getId()));
            query.append(" has name ").append(prepare(getName()));
            query.append(" has type ").append(prepare(getType()));
            if (getLabelChain() != null) query.append(getLabelChain());
            if (getDescription() != null) query.append(" has description ").append(prepare(getDescription()));
            query.append(" has revoked ").append(getRevoked());
            query.append(" has created ").append(getCreated());
            query.append(";");
            driver.execute(from(query.toString()));
        }
    }

    @Override
    public List<StixElement> toStixElements() {
        List<StixElement> elements = new ArrayList<>();
        elements.add(this);
        List<MalwareExternalReference> externalRefs = getExternal_references().stream()
                .filter(f -> f.getUrl() != null && f.getSource_name() != null)
                .collect(Collectors.toList());
        elements.addAll(externalRefs);
        return elements;
    }

    @Override
    public List<GraknRelation> extraRelations(Map<String, StixElement> stixElements) {
        List<GraknRelation> extraQueries = new ArrayList<>();
        //External refs
        extraQueries.addAll(createMalwareExternalRef());
        //Create the created_ref
        extraQueries.addAll(createCreatorRef(stixElements));
        //object_marking_refs
        extraQueries.addAll(createMarkingRefs(stixElements));
        return extraQueries;
    }

    private List<GraknRelation> createMalwareExternalRef() {
        return getExternal_references().stream()
                .filter(r -> r.getUrl() != null && r.getSource_name() != null)
                .map(r -> new GraknRelation(this, r, "so", "external_reference", "external_references"))
                .collect(Collectors.toList());
    }

    private String name;
    private String description;
    private List<MalwareExternalReference> external_references = new ArrayList<>();

    //region fields
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public List<MalwareExternalReference> getExternal_references() {
        return external_references;
    }

    public void setExternal_references(List<MalwareExternalReference> external_references) {
        this.external_references = external_references;
    }
    //endregion
}
