### Scalar
scalar DateTime

### Relay
type PageInfo {
    startCursor: String!,
    endCursor: String!,
    hasNextPage: Boolean!,
    hasPreviousPage: Boolean!,
    globalCount: Int!
}
enum OrderingMode {
    asc,
    desc
}

### Edit
input EditInput {
    id: ID # ID of the instance in edition
    key: String! # Field name to change
    value: [String]! # Values to apply
}
input EditContext {
    focusOn: String! # Field name
}
type EditUserContext {
    username: String!
    focusOn: String # Field name
}

### User
enum UsersOrdering {
    created,
    firstname,
    lastname,
    email
}
enum UserRole {
    ROLE_ADMIN
    ROLE_USER
}
type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]
}
type UserEdge {
    cursor: String!
    node: User!
}
type User {
    id: ID!
    username: String
    firstname: String
    lastname: String
    email: String!
    language: String
    created: DateTime
    grant: [String]
    editContext: [EditUserContext]
    created_at: DateTime
    updated_at: DateTime
}
input UserAddInput {
    username: String!
    password: String!
    grant: [UserRole]!
    email: String!
}
input UserLoginInput {
    email: String!
    password: String!
}

### Marking definitions
enum MarkingDefinitionsOrdering {
    stix_id,
    definition_type,
    definition,
    level,
    created,
    modified
}
type MarkingDefinitionConnection {
    pageInfo: PageInfo!
    edges: [MarkingDefinitionEdge]
}
type MarkingDefinitionEdge {
    cursor: String!
    node: MarkingDefinition!
}
type MarkingDefinition {
    id: ID!
    definition_type: String!
    definition: String!
    level: Int
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    created_at: DateTime
    updated_at: DateTime
}
input MarkingDefinitionAddInput {
    definition_type: String!
    definition: String!
    level: Int!
    clientMutationId: String
}

### KillChain Phases
enum KillChainPhasesOrdering {
    stix_id,
    order,
    kill_chain_name,
    phase_name
}
type KillChainPhaseConnection {
    pageInfo: PageInfo!
    edges: [KillChainPhaseEdge]
}
type KillChainPhaseEdge {
    cursor: String!
    node: KillChainPhase!
}
type KillChainPhase {
    id: ID!
    kill_chain_name: String!
    phase_name: String!
    order: Int
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime
    updated_at: DateTime
}
input KillChainPhaseAddInput {
    kill_chain_name: String!
    phase_name: String!
    order: Int!
}

### Threat Actors
enum ThreatActorsOrdering {
    stix_id,
    name,
    created,
    modified
}
type ThreatActorConnection {
    pageInfo: PageInfo!
    edges: [ThreatActorEdge]
}
type ThreatActorEdge {
    cursor: String!
    node: ThreatActor!
}
type ThreatActor {
    id: ID!
    name: String!
    stix_label: [String]
    alias: [String]
    stix_role: String
    goal: String
    sophistication: String
    resource_level: String
    primary_motivation: String
    secondary_motivation: [String]
    personal_motivation: String
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime
    updated_at: DateTime
}
input ThreatActorAddInput {
    name: String!
    description: String!
    marking_definitions: [String]
    clientMutationId: String
}

### IntrusionSets
enum IntrusionSetsOrdering {
    stix_id,
    name,
    created,
    modified
}
type IntrusionSetConnection {
    pageInfo: PageInfo!
    edges: [IntrusionSetEdge]
}
type IntrusionSetEdge {
    cursor: String!
    node: IntrusionSet!
}
type IntrusionSet {
    id: ID!
    name: String!
    stix_label: [String]
    alias: [String]
    description: String
    first_seen: DateTime
    last_seen: DateTime
    goal: String
    resource_level: String
    primary_motivation: String
    secondary_motivation: String
    created_at: DateTime
    updated_at: DateTime
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
}
input IntrusionSetAddInput {
    name: String!
    description: String!
    clientMutationId: String
}

### Malware
enum MalwaresOrdering {
    stix_id,
    name,
    created,
    modified
}
type MalwareConnection {
    pageInfo: PageInfo!
    edges: [MalwareEdge]
}
type MalwareEdge {
    cursor: String!
    node: Malware!
}
type Malware {
    id: ID!
    name: String!
    stix_label: [String]
    description: String
    created_at: DateTime
    updated_at: DateTime
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    killChainPhases: KillChainPhaseConnection
}
input MalwareAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    killChainPhases: [String]
    clientMutationId: String
}

### Reports
enum ReportsOrdering {
    stix_id,
    name,
    created,
    modified
}
type ReportsConnection {
    pageInfo: PageInfo!
    edges: [ReportEdge]
}
type ReportEdge {
    cursor: String!
    node: Report!
}
type ReportPayload {
    reportEdge: ReportEdge
}
type Report {
    id: ID!
    name: String!
    stix_label: [String]
    description: String
    created_at: DateTime
    updated_at: DateTime
    created: DateTime
    modified: DateTime
    published: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
}
input ReportAddInput {
    name: String!
    description: String!
    clientMutationId: String
}

### Rekatuibs
input RelationAddInput {
    fromRole: String!
    toId: ID!
    toRole: String!
    through: String!
}

### QUERIES
type Query {
    # Users
    me: User
    user(id: String!): User
    users(first: Int, after: ID, orderBy: UsersOrdering, orderMode: OrderingMode, search: String): UserConnection
    # MarkingDefinitions
    markingDefinition(id: String!): MarkingDefinition
    markingDefinitions(first: Int, after: ID, orderBy: MarkingDefinitionsOrdering, orderMode: OrderingMode, search: String): MarkingDefinitionConnection
    # KillChainPhases
    killChainPhase(id: String!): KillChainPhase
    killChainPhases(first: Int, after: ID, orderBy: KillChainPhasesOrdering, orderMode: OrderingMode, search: String): KillChainPhaseConnection
    # ThreatActors
    threatActor(id: String!): ThreatActor
    threatActors(first: Int, after: ID, orderBy: ThreatActorsOrdering, orderMode: OrderingMode, search: String): ThreatActorConnection
    # IntursionSets
    intrusionSet(id: String!): IntrusionSet
    intrusionSets(first: Int, after: ID, orderBy: IntrusionSetsOrdering, orderMode: OrderingMode, search: String): IntrusionSetConnection
    # Malwares
    malware(id: String!): Malware
    malwares(first: Int, after: ID, orderBy: MalwaresOrdering, orderMode: OrderingMode, search: String): MalwareConnection
}

### SUBSCRIPTIONS
type Subscription {
    user(id: ID!): User
    markingDefinition(id: ID!): MarkingDefinition
    killChainPhase(id: ID!): KillChainPhase
    threatActor(id: ID!): ThreatActor
    intrusionSet(id: ID!): IntrusionSet
    malware(id: ID!): Malware
}

### MUTATIONS

# User
type UserEditMutations {
    delete: ID
    fieldPatch(input: EditInput): User
    contextPatch(input: EditContext): User
    relationAdd(input: RelationAddInput): User
    relationDelete(relationId: ID!): ID
}

# MarkingDefinition
type MarkingDefinitionEditMutations {
    delete: ID
    fieldPatch(input: EditInput): MarkingDefinition
    contextPatch(input: EditContext): MarkingDefinition
    relationAdd(input: RelationAddInput): MarkingDefinition
    relationDelete(relationId: ID!): ID
}

# KillChainPhase
type KillChainPhaseEditMutations {
    delete: ID
    fieldPatch(input: EditInput): KillChainPhase
    contextPatch(input: EditContext): KillChainPhase
    relationAdd(input: RelationAddInput): KillChainPhase
    relationDelete(relationId: ID!): ID
}

# ThreatActor
type ThreatActorEditMutations {
    delete: ID
    fieldPatch(input: EditInput): ThreatActor
    contextPatch(input: EditContext): ThreatActor
    relationAdd(input: RelationAddInput): ThreatActor
    relationDelete(relationId: ID!): ID
}

# IntrusionSet
type IntrusionSetEditMutations {
    delete: ID
    fieldPatch(input: EditInput): IntrusionSet
    contextPatch(input: EditContext): IntrusionSet
    relationAdd(input: RelationAddInput): IntrusionSet
    relationDelete(relationId: ID!): ID
}

# Malware
type MalwareEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Malware
    contextPatch(input: EditContext): Malware
    relationAdd(input: RelationAddInput): Malware
    relationDelete(relationId: ID!): ID
}

# Next

type Mutation {
    # Login
    token(input: UserLoginInput) : String
    # User
    userAdd(input: UserAddInput): MarkingDefinition
    userEdit(id: ID!): UserEditMutations
    # MarkingDefinition
    markingDefinitionAdd(input: MarkingDefinitionAddInput): MarkingDefinition
    markingDefinitionEdit(id: ID!): MarkingDefinitionEditMutations
    # KillChainPhase
    killChainPhaseAdd(input: KillChainPhaseAddInput): KillChainPhase
    killChainPhaseEdit(id: ID!): KillChainPhaseEditMutations
    # ThreatActor
    threatActorAdd(input: ThreatActorAddInput): ThreatActor
    threatActorEdit(id: ID!): ThreatActorEditMutations
    # IntrusionSet
    intrusionSetAdd(input: IntrusionSetAddInput): IntrusionSet
    intrusionSetEdit(id: ID!): IntrusionSetEditMutations
    # Malware
    malwareAdd(input: MalwareAddInput): Malware
    malwareEdit(id: ID!): MalwareEditMutations
}

