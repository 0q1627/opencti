/* eslint-disable no-underscore-dangle */
import React, { Component } from 'react';
import { createPaginationContainer } from 'react-relay';
import graphql from 'babel-plugin-relay/macro';
import { withStyles } from '@material-ui/core/styles';
import {
  AutoSizer, ColumnSizer, InfiniteLoader, Grid, WindowScroller,
} from 'react-virtualized';
import * as PropTypes from 'prop-types';
import { MalwareCard, MalwareCardDummy } from './MalwareCard';

const styles = () => ({
  windowScrollerWrapper: {
    flex: '1 1 auto',
  },
  bottomPad: {
    padding: '0 0 30px 0',
  },
  rightPad: {
    padding: '0 30px 30px 0',
  },
  leftPad: {
    padding: '0 0 30px 30px',
  },
});
const nbCardsPerLine = 4;
// We can't have the exact number of expected lines. InfiniteLoader requirement
const nbDummyRowsInit = 5;
export const nbCardsToLoad = (nbCardsPerLine * (nbDummyRowsInit + 1));

class MalwaresCards extends Component {
  constructor(props) {
    super(props);
    this._isCellLoaded = this._isCellLoaded.bind(this);
    this._loadMore = this._loadMore.bind(this);
    this._onSectionRendered = this._onSectionRendered.bind(this);
    this._cellRenderer = this._cellRenderer.bind(this);
    this._setRef = this._setRef.bind(this);
    this.state = {
      scrollToIndex: -1,
      showHeaderText: true,
    };
  }

  _setRef(windowScroller) {
    // noinspection JSUnusedGlobalSymbols
    this._windowScroller = windowScroller;
  }

  _loadMore() {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      return;
    }
    // Fetch the next {nbCardsToLoad} feed items
    this.props.relay.loadMore(nbCardsToLoad, () => {
      // console.log(error);
    });
  }

  _onSectionRendered({
    columnStartIndex, columnStopIndex, rowStartIndex, rowStopIndex,
  }) {
    const startIndex = rowStartIndex * nbCardsPerLine + columnStartIndex;
    const stopIndex = rowStopIndex * nbCardsPerLine + columnStopIndex;
    this._onRowsRendered({
      startIndex,
      stopIndex,
    });
  }

  _isCellLoaded({ index }) {
    if (this.props.dummy) {
      return true;
    }
    const list = this.props.data.malwares.edges;
    return !this.props.relay.hasMore() || index < list.length;
  }

  _cellRenderer({
    columnIndex, key, rowIndex, style,
  }) {
    const { classes, dummy } = this.props;
    const index = rowIndex * nbCardsPerLine + columnIndex;
    let className = classes.bottomPad;
    switch (columnIndex) {
      case 0:
      case 1:
        className = classes.rightPad;
        break;
      case 3:
        className = classes.leftPad;
        break;
      default:
    }
    if (dummy) {
      return <div className={className} key={key} style={style}><MalwareCardDummy/></div>;
    }

    const list = this.props.data.malwares.edges;
    if (!this._isCellLoaded({ index })) {
      return <div className={className} key={key} style={style}><MalwareCardDummy/></div>;
    }
    const malwareNode = list[index];
    if (!malwareNode) {
      return <div key={key}>&nbsp;</div>;
    }
    const malware = malwareNode.node;
    return <div className={className} key={key} style={style}>
        <MalwareCard key={malware.id} malware={malware}/>
    </div>;
  }

  render() {
    const { classes, dummy, data } = this.props;
    const list = dummy ? [] : data.malwares.edges;
    // const globalCount = dummy ? 0 : data.malwares.pageInfo.globalCount;
    // If init screen aka dummy
    let rowCount;
    if (dummy) { // If dummy, we load the default number of dummy lines.
      rowCount = nbDummyRowsInit;
    } else { // Else we load the lines for the result + dummy if loading in progress
      const nbLineForCards = Math.ceil(list.length / nbCardsPerLine);
      rowCount = this.props.relay.isLoading() ? nbLineForCards + nbDummyRowsInit : nbLineForCards;
    }

    const { scrollToIndex } = this.state;
    // console.log(`globalCount: ${rowCount}/${Math.ceil(globalCount / nbCardsPerLine)}`);

    return (
      <WindowScroller ref={this._setRef} scrollElement={window}>
        {({
          height, isScrolling, onChildScroll, scrollTop,
        }) => (
          <div className={classes.windowScrollerWrapper}>
            <InfiniteLoader isRowLoaded={this._isCellLoaded}
                            loadMoreRows={this._loadMore} rowCount={Number.MAX_SAFE_INTEGER}>
              {({ onRowsRendered }) => {
                this._onRowsRendered = onRowsRendered;
                return (
                  <AutoSizer disableHeight>
                    {({ width }) => (
                      <ColumnSizer columnMaxWidth={440}
                                   columnMinWidth={150}
                                   columnCount={4}
                                   width={width}>
                        {({ adjustedWidth, columnWidth }) => (
                          <Grid
                            ref={(el) => {
                              window.listEl = el;
                            }}
                            autoHeight
                            height={height}
                            onRowsRendered={onRowsRendered}
                            isScrolling={isScrolling}
                            onScroll={onChildScroll}
                            columnWidth={columnWidth}
                            columnCount={4}
                            rowHeight={230}
                            overscanColumnCount={4}
                            overscanRowCount={10}
                            rowCount={rowCount}
                            cellRenderer={this._cellRenderer}
                            onSectionRendered={this._onSectionRendered}
                            scrollToIndex={scrollToIndex}
                            scrollTop={scrollTop}
                            width={adjustedWidth}
                          />
                        )}
                      </ColumnSizer>
                    )}
                  </AutoSizer>
                );
              }}
            </InfiniteLoader>
          </div>
        )}
      </WindowScroller>
    );
  }
}

MalwaresCards.propTypes = {
  classes: PropTypes.object,
  data: PropTypes.object,
  relay: PropTypes.object,
  malwares: PropTypes.object,
  dummy: PropTypes.bool,
};

export const malwaresCardsQuery = graphql`
    query MalwaresCardsPaginationQuery($count: Int!, $cursor: ID, $orderBy: MalwaresOrdering) {
        ...MalwaresCards_data @arguments(count: $count, cursor: $cursor, orderBy: $orderBy)
    }
`;

export default withStyles(styles)(createPaginationContainer(
  MalwaresCards,
  {
    data: graphql`
        fragment MalwaresCards_data on Query @argumentDefinitions(
            count: {type: "Int", defaultValue: 25}
            cursor: {type: "ID"}
            orderBy: {type: "MalwaresOrdering", defaultValue: ID}) {
            malwares(first: $count, after: $cursor, orderBy: $orderBy) @connection(key: "Pagination_malwares") {
                edges {
                    node {
                        ...MalwareCard_malware
                    }
                }
                pageInfo {
                    globalCount
                }
            }
        }
    `,
  },
  {
    direction: 'forward',
    getConnectionFromProps(props) {
      return props.data && props.data.malwares;
    },
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, { count, cursor }, fragmentVariables) {
      return {
        count,
        cursor,
        orderBy: fragmentVariables.orderBy,
      };
    },
    query: malwaresCardsQuery,
  },
));
