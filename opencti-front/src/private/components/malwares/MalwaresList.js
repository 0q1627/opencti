import React, {Component} from 'react';
import {createPaginationContainer} from "react-relay";
import graphql from 'babel-plugin-relay/macro';
import {withStyles} from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import List from '@material-ui/core/List';
import MalwareViewLine from "./MalwareViewLine";

const styles = theme => ({
  title: {
    float: 'left'
  }
})

class MalwaresList extends Component {
  render() {
    console.log('Malwares', this.props);
    return (
      <div>
        <Typography variant='h1' gutterBottom={true} classes={{root: this.props.classes.title}}>
          Malwares
        </Typography>
        <div className='clearfix'/>
        <List>
          {this.props.data.malwares.edges.map(
            edge => <MalwareViewLine key={edge.node.id} malware={edge.node}/>
          )}
        </List>
        <button onClick={() => this._loadMore()} title="Load More">Load more</button>
      </div>
    );
  }

  _loadMore() {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      console.log('No more to load', this.props.relay.hasMore(), this.props.relay.isLoading())
      return;
    }

    this.props.relay.loadMore(
      2,  // Fetch the next 10 feed items
      error => {
        console.log(error);
      },
    );
  }
}

export default withStyles(styles)(createPaginationContainer(
  MalwaresList,
  {
    data: graphql`
        fragment MalwaresList_data on Query @argumentDefinitions(
            count: {type: "Int", defaultValue: 10}
            cursor: {type: "ID"}
            orderBy: {type: "MalwaresOrdering", defaultValue: ID}
        ) {
            malwares(
                first: $count
                after: $cursor
                orderBy: $orderBy # Non-pagination variables
            ) @connection(key: "Pagination_malwares") {
                edges {
                    node {
                        id
                        ...MalwareViewLine_malware
                    }
                }
            }
        }
    `,
  },
  {
    direction: 'forward',
    getConnectionFromProps(props) {
      return props.data && props.data.malwares;
    },
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, {count, cursor}, fragmentVariables) {
      return {
        count,
        cursor,
        orderBy: fragmentVariables.orderBy
      };
    },
    query: graphql`
        query MalwaresListPaginationQuery($count: Int!, $cursor: ID, $orderBy: MalwaresOrdering) {
            ...MalwaresList_data @arguments(count: $count, cursor: $cursor, orderBy: $orderBy)
        }
    `
  }
));