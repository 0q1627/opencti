import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {injectIntl} from 'react-intl'
import {Formik, Field, Form} from 'formik'
import {TextField} from 'formik-material-ui';
import {withStyles} from '@material-ui/core/styles'
import Dialog from '@material-ui/core/Dialog'
import DialogTitle from '@material-ui/core/DialogTitle'
import DialogContent from '@material-ui/core/DialogContent'
import DialogActions from '@material-ui/core/DialogActions'
import Button from '@material-ui/core/Button'
import {Add} from '@material-ui/icons'

const styles = () => ({
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30
  }
})

class MalwareDialog extends Component {
  constructor(props) {
    super(props)
    this.state = {open: false}
  }

  handleOpen() {
    this.setState({open: true})
  }

  handleClose() {
    this.setState({open: false})
  }

  onSubmit(values, {setSubmitting}) {
    setTimeout(() => {
      setSubmitting(false);
      console.log(values);
    }, 500);
  }

  onReset() {
    this.handleClose()
  }

  render() {
    const {intl, classes, variant, malwareId} = this.props
    let controlElement = '';
    switch (variant) {
      case 'button':
        controlElement = <Button onClick={this.handleOpen.bind(this)} color='primary'>{intl.formatMessage({id: 'Create'})}</Button>;
        break;
      default:
        controlElement = <Button onClick={this.handleOpen.bind(this)} variant='fab' color='secondary' aria-label='Add' className={classes.createButton}><Add/></Button>;
    }

    return (
      <div>
        {controlElement}
        <Formik
          initialValues={[]}
          validate={(values) => {
            const errors = {}
            if (!values.name) {
              errors.name = intl.formatMessage({id: 'This field is required'})
            }
            return errors
          }}
          onSubmit={this.onSubmit.bind(this)}
          onReset={this.onReset.bind(this)}
          render={({submitForm, handleReset, isSubmitting, values, setFieldValue}) => (
            <Dialog
              open={this.state.open}
              keepMounted={true}
              fullWidth={true}
              onClose={this.handleClose.bind(this)}
            >
              <DialogTitle>
                {malwareId ? intl.formatMessage({id: 'Update a malware'}) : intl.formatMessage({id: 'Create a malware'})}
              </DialogTitle>
              <DialogContent>
                <Form>
                  <Field name='name' component={TextField} label={intl.formatMessage({id: 'Name'})} fullWidth={true}/>
                  <Field name='description' component={TextField} label={intl.formatMessage({id: 'Description'})} fullWidth={true} multiline={true} rows='4' style={{marginTop: 20}}/>
                </Form>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleReset} color='primary' disabled={isSubmitting}>
                  {intl.formatMessage({id: 'Cancel'})}
                </Button>
                <Button onClick={submitForm} color='primary' disabled={isSubmitting}>
                  {malwareId ? intl.formatMessage({id: 'Update'}) : intl.formatMessage({id: 'Create'})}
                </Button>
              </DialogActions>
            </Dialog>
          )}
        />
      </div>
    )
  }
}

MalwareDialog.propTypes = {
  variant: PropTypes.string,
  malwareId: PropTypes.string
}

export default injectIntl(withStyles(styles)(MalwareDialog));