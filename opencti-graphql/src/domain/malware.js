import { head } from 'ramda';
import { pubsub } from '../database/redis';
import {
  deleteByID,
  loadByID,
  qk,
  now,
  editInput,
  paginate
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';

export const findAll = args => paginate('match $m isa Malware', args);

export const findMarkingDef = (malwareId, args) =>
  paginate(
    `match $marking isa Marking-Definition; 
    (marking:$marking, so:$malware) isa object_marking_refs; 
    $malware id ${malwareId}`,
    args
  );

export const killChainPhases = (malwareId, args) =>
  paginate(
    `match $kc isa Kill-Chain-Phase; 
    (kill_chain_phase:$kc, phase_belonging:$malware) isa kill_chain_phases; 
    $malware id ${malwareId}`,
    args
  );

export const findById = malwareId => loadByID(malwareId);

export const addMalware = async (user, malware) => {
  const createMalware = qk(`insert $malware isa Malware 
    has type "malware";
    $malware has name "${malware.name}";
    $malware has description "${malware.description}";
    $malware has created ${now()};
    $malware has modified ${now()};
    $malware has revoked false;
  `);
  return createMalware.then(result => {
    const { data } = result;
    return findById(head(data).malware.id).then(malwareCreated => {
      pubsub.publish(BUS_TOPICS.Malware.ADDED_TOPIC, { malwareCreated });
      return malwareCreated;
    });
  });
};

export const deleteMalware = malwareId => deleteByID(malwareId);

export const malwareEditContext = (user, input) => {
  const { focusOn, isTyping } = input;
  // Context map of malware users notifications
  // SET edit:{V15431} '[ {"user": "email01", "focusOn": "name", "isTyping": true } ]'
  return [
    {
      username: user.email,
      focusOn,
      isTyping
    }
  ];
};

export const malwareEditField = (user, input) =>
  editInput(input, BUS_TOPICS.Malware.EDIT_TOPIC);
