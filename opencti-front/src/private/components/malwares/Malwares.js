import React, {Component} from "react";
import {QueryRenderer} from "react-relay";
import environment from "../../../relay/environment";
import graphql from "babel-plugin-relay/macro";
import {injectIntl} from "react-intl";
import {withStyles} from '@material-ui/core/styles'
import Typography from '@material-ui/core/Typography'
import List from '@material-ui/core/List'
import ListItem from '@material-ui/core/ListItem'
import ListItemIcon from '@material-ui/core/ListItemIcon'
import ListItemText from '@material-ui/core/ListItemText'
import {ArrowDropDown, ArrowDropUp} from '@material-ui/icons'
import SearchInput from '../../../components/SearchInput'
import MalwaresList from "./MalwaresList";
import MalwareDialog from "./MalwareDialog";

const styles = () => ({
  item: {
    paddingLeft: 10,
    textTransform: 'uppercase',
    cursor: 'pointer'
  },
  title: {
    float: 'left'
  },
  search: {
    float: 'right',
    marginTop: '-10px'
  }
})

const inlineStyles = {
  iconSort: {
    position: 'absolute',
    margin: '0 0 0 5px',
    padding: 0,
    top: '11px'
  },
  name: {
    float: 'left',
    width: '70%',
    fontSize: 12,
    fontWeight: '700',
  },
  created: {
    float: 'left',
    width: '15%',
    fontSize: 12,
    fontWeight: '700',
  },
  modified: {
    float: 'left',
    fontSize: 12,
    fontWeight: '700',
  }
}

export const MalwaresPaginationQuery = graphql`
    query MalwaresPaginationQuery($count: Int!, $cursor: ID, $orderBy: MalwaresOrdering) {
        ...MalwaresList_data @arguments(count: $count, cursor: $cursor, orderBy: $orderBy)
    }
`;

class Malwares extends Component {
  constructor(props) {
    super(props)
    this.state = {sortBy: 'name', orderAsc: true, searchTerm: '', searchTimeout: 0}
  }

  handleSearch(event) {
    this.setState({searchTerm: event.target.value})
  }

  reverseBy(field) {
    this.setState({sortBy: field, orderAsc: !this.state.orderAsc})
  }

  SortHeader(field, label) {
    const {intl} = this.props
    return (
      <div style={inlineStyles[field]} onClick={this.reverseBy.bind(this, field)}>
        <span>{intl.formatMessage({id: label})}</span>
        {this.state.sortBy === field ? this.state.orderAsc ? <ArrowDropDown style={inlineStyles.iconSort}/> : <ArrowDropUp style={inlineStyles.iconSort}/> : ""}
      </div>
    )
  }

  render() {
    const {intl, classes} = this.props
    return (
      <div>
        <Typography variant='h1' gutterBottom={true} classes={{root: classes.title}}>
          {intl.formatMessage({id: 'Malwares'})}
        </Typography>
        <div className={this.props.classes.search}>
          <SearchInput handleSearch={this.handleSearch.bind(this)}/>
        </div>
        <div className='clearfix'/>
        <List>
          <ListItem classes={{default: classes.item}} divider={false}>
            <ListItemIcon>
              <span style={{padding: '0 8px 0 8px', fontWeight: 700, fontSize: 12}}>#</span>
            </ListItemIcon>
            <ListItemText primary={
              <div>
                {this.SortHeader('name', 'Name')}
                {this.SortHeader('created', 'Creation date')}
                {this.SortHeader('modified', 'Modification date')}
              </div>
            }/>
          </ListItem>
          <QueryRenderer
            environment={environment}
            query={MalwaresPaginationQuery}
            variables={{
              count: 25,
              orderBy: this.state.sortBy
            }}
            render={({error, props}) => {
              if (error) {
                return <div>{error.message}</div>
              } else if (props) {
                return <MalwaresList data={props}/>
              }
              return <div>Loading</div>
            }}
          />
        </List>
        <MalwareDialog/>
      </div>
    );
  }
}

export default injectIntl(withStyles(styles)(Malwares));