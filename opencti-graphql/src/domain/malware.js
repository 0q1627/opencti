import { map } from 'ramda';
import uuid from 'uuid/v4';
import { delEditContext, setEditContext } from '../database/redis';
import {
  createRelation,
  deleteByID,
  deleteRelation,
  editInputTx,
  loadByID,
  notify,
  now,
  paginate,
  qkObjUnique,
  takeTx
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';

export const findAll = args => paginate('match $m isa Malware', args);

export const findById = malwareId => loadByID(malwareId);

export const createdByRef = malwareId =>
  qkObjUnique(
    `match $x isa Identity; 
    $rel(creator:$x, so:$malware) isa created_by_ref; 
    $malware id ${malwareId}; offset 0; limit 1; get $x,$rel;`,
    'x',
    'rel'
  );

export const markingDefinitions = (malwareId, args) =>
  paginate(
    `match $marking isa Marking-Definition; 
    $rel(marking:$marking, so:$malware) isa object_marking_refs; 
    $malware id ${malwareId}`,
    args
  );

export const killChainPhases = (malwareId, args) =>
  paginate(
    `match $kc isa Kill-Chain-Phase; 
    $rel(kill_chain_phase:$kc, phase_belonging:$malware) isa kill_chain_phases; 
    $malware id ${malwareId}`,
    args
  );

export const reports = (malwareId, args) =>
  paginate(
    `match $report isa Report; 
    $rel(knowledge_aggregation:$report, so:$malware) isa object_refs; 
    $malware id ${malwareId}`,
    args
  );

export const addMalware = async (user, malware) => {
  const wTx = await takeTx();
  const malwareIterator = await wTx.query(`insert $malware isa Malware 
    has type "malware";
    $malware has stix_id "malware--${uuid()}";
    $malware has stix_label "";
    $malware has name "${malware.name}";
    $malware has description "${malware.description}";
    $malware has name_lowercase "${malware.name.toLowerCase()}";
    $malware has description_lowercase "${
      malware.description ? malware.description.toLowerCase() : ''
    }";
    $malware has created ${now()};
    $malware has modified ${now()};
    $malware has revoked false;
    $malware has created_at ${now()};
    $malware has updated_at ${now()};
  `);
  const createMalware = await malwareIterator.next();
  const createdMalwareId = await createMalware.map().get('malware').id;

  if (malware.createdByRef) {
    await wTx.query(`match $from id ${createdMalwareId};
         $to id ${malware.createdByRef};
         insert (so: $from, creator: $to)
         isa created_by_ref;`);
  }

  if (malware.markingDefinitions) {
    const createMarkingDefinition = markingDefinition =>
      wTx.query(
        `match $from id ${createdMalwareId}; $to id ${markingDefinition}; insert (so: $from, marking: $to) isa object_marking_refs;`
      );
    const markingDefinitionsPromises = map(
      createMarkingDefinition,
      malware.markingDefinitions
    );
    await Promise.all(markingDefinitionsPromises);
  }

  if (malware.killChainPhases) {
    const createKillChainPhase = killChainPhase =>
      wTx.query(
        `match $from id ${createdMalwareId}; $to id ${killChainPhase}; insert (phase_belonging: $from, kill_chain_phase: $to) isa kill_chain_phases;`
      );
    const killChainPhasesPromises = map(
      createKillChainPhase,
      malware.killChainPhases
    );
    await Promise.all(killChainPhasesPromises);
  }

  await wTx.commit();

  return loadByID(createdMalwareId).then(created =>
    notify(BUS_TOPICS.Malware.ADDED_TOPIC, created, user)
  );
};

export const malwareDelete = malwareId => deleteByID(malwareId);

export const malwareAddRelation = (user, malwareId, input) =>
  createRelation(malwareId, input).then(relationData => {
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, relationData.node, user);
    return relationData;
  });

export const malwareDeleteRelation = (user, malwareId, relationId) =>
  deleteRelation(malwareId, relationId).then(relationData => {
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, relationData.node, user);
    return relationData;
  });

export const malwareCleanContext = (user, malwareId) => {
  delEditContext(user, malwareId);
  return loadByID(malwareId).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
};

export const malwareEditContext = (user, malwareId, input) => {
  setEditContext(user, malwareId, input);
  return loadByID(malwareId).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
};

export const malwareEditField = (user, malwareId, input) =>
  editInputTx(malwareId, input).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
