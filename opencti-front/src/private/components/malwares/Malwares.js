/* eslint-disable no-nested-ternary */
// TODO Remove no-nested-ternary
import React, { Component } from 'react';
import { QueryRenderer } from 'react-relay';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import IconButton from '@material-ui/core/IconButton';
import {
  ArrowDropDown, ArrowDropUp, Dashboard, TableChart,
} from '@material-ui/icons';
import * as PropTypes from 'prop-types';
import { compose } from 'ramda';
import environment from '../../../relay/environment';
import MalwaresLines, { malwaresLinesQuery } from './MalwaresLines';
import MalwaresCards, { malwaresCardsQuery, nbCardsToLoad } from './MalwaresCards';
import MalwareDialog from './MalwareDialog';
import inject18n from '../../../components/i18n';

const styles = () => ({
  windowScrollerWrapper: {
    flex: '1 1 auto',
  },
  item: {
    paddingLeft: 10,
    textTransform: 'uppercase',
    cursor: 'pointer',
  },
  title: {
    float: 'left',
  },
  views: {
    float: 'right',
    marginTop: -20,
  },
});

const inlineStyles = {
  iconSort: {
    position: 'absolute',
    margin: '0 0 0 5px',
    padding: 0,
    top: '11px',
  },
  name: {
    float: 'left',
    width: '70%',
    fontSize: 12,
    fontWeight: '700',
  },
  created: {
    float: 'left',
    width: '15%',
    fontSize: 12,
    fontWeight: '700',
  },
  modified: {
    float: 'left',
    fontSize: 12,
    fontWeight: '700',
  },
};

class Malwares extends Component {
  constructor(props) {
    super(props);
    this.state = {
      view: 'cards', sortBy: 'name', orderAsc: true, searchTerm: '', searchTimeout: 0,
    };
  }

  handleChangeView(mode) {
    this.setState({ view: mode });
  }

  handleSearch(event) {
    this.setState({ searchTerm: event.target.value });
  }

  reverseBy(field) {
    this.setState({ sortBy: field, orderAsc: !this.state.orderAsc });
  }

  SortHeader(field, label) {
    const { t } = this.props;
    return (
      <div style={inlineStyles[field]} onClick={this.reverseBy.bind(this, field)}>
        <span>{t(label)}</span>
        {this.state.sortBy === field ? this.state.orderAsc ? <ArrowDropDown style={inlineStyles.iconSort}/> : <ArrowDropUp style={inlineStyles.iconSort}/> : ''}
      </div>
    );
  }

  renderCards() {
    return (
        <QueryRenderer
          environment={environment}
          query={malwaresCardsQuery}
          variables={{
            count: nbCardsToLoad,
            orderBy: this.state.sortBy,
          }}
          render={({ error, props }) => {
            if (error) {
              return <MalwaresCards data={null} dummy={true}/>;
            } if (props) {
              return <MalwaresCards data={props} dummy={false}/>;
            }
            return <MalwaresCards data={null} dummy={true}/>;
          }}
        />
    );
  }

  renderLines() {
    const { classes } = this.props;
    return (
      <List>
        <ListItem classes={{ default: classes.item }} divider={false}>
          <ListItemIcon>
            <span style={{ padding: '0 8px 0 8px', fontWeight: 700, fontSize: 12 }}>#</span>
          </ListItemIcon>
          <ListItemText primary={
            <div>
              {this.SortHeader('name', 'Name')}
              {this.SortHeader('created', 'Creation date')}
              {this.SortHeader('modified', 'Modification date')}
            </div>
          }/>
        </ListItem>
        <QueryRenderer
          environment={environment}
          query={malwaresLinesQuery}
          variables={{ count: 25, orderBy: this.state.sortBy }}
          render={({ error, props }) => {
            if (error) { // Errors
              return <MalwaresLines data={null} dummy={true}/>;
            } if (props) { // Done
              return <MalwaresLines data={props}/>;
            }
            // Loading
            return <MalwaresLines data={null} dummy={true}/>;
          }}
        />
      </List>
    );
  }

  render() {
    const { t, classes } = this.props;
    return (
      <div>
        <Typography variant='h1' gutterBottom={true} classes={{ root: classes.title }}>
          {t('Malwares')}
        </Typography>
        <div className={this.props.classes.views}>
          <IconButton color={this.state.view === 'cards' ? 'secondary' : 'primary'}
                      classes={{ root: this.props.classes.button }}
                      onClick={this.handleChangeView.bind(this, 'cards')}>
            <Dashboard/>
          </IconButton>
          <IconButton color={this.state.view === 'lines' ? 'secondary' : 'primary'}
                      classes={{ root: this.props.classes.button }}
                      onClick={this.handleChangeView.bind(this, 'lines')}>
            <TableChart/>
          </IconButton>
        </div>
        <div className='clearfix'/>
        {this.state.view === 'cards' ? this.renderCards() : ''}
        {this.state.view === 'lines' ? this.renderLines() : ''}
        <MalwareDialog orderBy={this.state.sortBy}/>
      </div>
    );
  }
}

Malwares.propTypes = {
  classes: PropTypes.object,
  t: PropTypes.func,
  history: PropTypes.object,
};

export default compose(
  inject18n,
  withStyles(styles),
)(Malwares);
