import React, { Component } from 'react';
import PropTypes from 'prop-types';
import graphql from 'babel-plugin-relay/macro';
import { QueryRenderer } from 'react-relay';
import { compose } from 'ramda';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import AppBar from '@material-ui/core/AppBar';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import { Close } from '@material-ui/icons';
import inject18n from '../../../components/i18n';
import environment from '../../../relay/environment';
import MalwareEditionOverview from './MalwareEditionOverview';

const malwareQuery = graphql`
    query MalwareEditionContainerQuery($id: String!) {
        malware(id: $id) {
            ...MalwareEditionOverview_malware
        }
    }
`;

const styles = theme => ({
  header: {
    backgroundColor: theme.palette.navAlt.backgroundHeader,
    padding: '20px 20px 20px 60px',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    left: 5,
  },
  importButton: {
    position: 'absolute',
    top: 15,
    right: 20,
  },
  container: {
    padding: '10px 20px 20px 20px',
  },
  appBar: {
    width: '100%',
    zIndex: theme.zIndex.drawer + 1,
    backgroundColor: theme.palette.navAlt.background,
    color: theme.palette.header.text,
    borderBottom: '1px solid #5c5c5c',
  },
});

class MalwareEditionContainer extends Component {
  constructor(props) {
    super(props);
    this.state = { currentTab: 0 };
  }

  handleChangeTab(event, value) {
    this.setState({ currentTab: value });
  }

  renderEditionOverview() {
    const { malwareId } = this.props;
    return (
      <QueryRenderer
        environment={environment}
        query={malwareQuery}
        variables={{ id: malwareId }}
        render={({ error, props }) => {
          if (error) { // Errors
            return <div> &nbsp; </div>;
          }
          if (props) { // Done
            return <MalwareEditionOverview malware={props.malware}/>;
          }
          // Loading
          return <div> &nbsp; </div>;
        }}
      />
    );
  }

  render() {
    const { t, classes } = this.props;
    return (
      <div>
        <div className={classes.header}>
          <IconButton aria-label='Close' className={classes.closeButton} onClick={this.handleClose.bind(this)}>
            <Close fontSize='small'/>
          </IconButton>
          <Typography variant='h6'>
            {t('Update a malware')}
          </Typography>
          <Button variant='contained' size='small' color='secondary' className={classes.importButton}>
            {t('Import')}
          </Button>
        </div>
        <div className={classes.container}>
          <AppBar position='static' elevation={0} className={classes.appBar}>
            <Tabs value={this.state.currentTab} onChange={this.handleChangeTab.bind(this)}>
              <Tab label={t('Overview')}/>
              <Tab label={t('Observables')}/>
              <Tab label={t('Relationships')}/>
            </Tabs>
          </AppBar>
          {this.state.currentTab === 0 && this.renderEditionOverview()}
        </div>
      </div>
    );
  }
}

MalwareEditionContainer.propTypes = {
  malwareId: PropTypes.string.isRequired,
  classes: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
};

export default compose(
  inject18n,
  withStyles(styles, { withTheme: true }),
)(MalwareEditionContainer);
