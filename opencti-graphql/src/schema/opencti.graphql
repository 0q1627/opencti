### Scalar
scalar DateTime

### Relay
type PageInfo {
    startCursor: String!,
    endCursor: String!,
    hasNextPage: Boolean!,
    hasPreviousPage: Boolean!,
    globalCount: Int!
}

### User
enum UsersOrdering {
    id,
    email
}
enum UserRole {
    ROLE_ADMIN
    ROLE_USER
}
type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]
}
type UserEdge {
    cursor: String!
    node: User!
}
type User {
    id: ID!
    username: String
    firstname: String
    lastname: String
    email: String!
    language: String
    created: DateTime
    grant: [String]
}
input UserAddInput {
    username: String!
    password: String!
    grant: [UserRole]!
    email: String!
}
input UserLoginInput {
    email: String!
    password: String!
}

### Malware
enum MalwaresOrdering {
    id,
    name,
    created,
    modified
}
type MalwareConnection {
    pageInfo: PageInfo!
    edges: [MalwareEdge]
}
type MalwareEdge {
    cursor: String!
    node: Malware!
}

type MalwarePayload {
    viewer: User
    malwareEdge: MalwareEdge
    clientMutationId: String
}

type Malware {
    id: ID!
    name: String!
    stix_label: [String]
    description: String
    created_at: DateTime
    updated_at: DateTime
    created: DateTime
    modified: DateTime
    revoked: Boolean
}

type EditUserContext {
    username: String!
    focusOn: String! # Field name
    isTyping: Boolean!
}

type MalwareEditSubscription {
    malware: Malware # Can be null if only the context is modified
    context: [EditUserContext]
}

input MalwareAddInput {
    name: String!
    description: String!
    clientMutationId: String
}

input EditInput {
    id: ID! # ID of the instance to edit
    key: String! # Field name to change
    value: [String]! # Values to apply
}

input EditContext {
    id: ID! # ID of the instance in edition
    focusOn: String! # Field name
    isTyping: Boolean!
}

### QUERIES
type Query {
    me: User
    user(id: String!): User
    users(first: Int, after: ID, orderBy: UsersOrdering, search: String): UserConnection
    # Malwares
    malware(id: String!): Malware
    malwares(first: Int, after: ID, orderBy: MalwaresOrdering, search: String): MalwareConnection
}

### SUBSCRIPTIONS
type Subscription {
    userAdded: User
    malwareEdit: MalwareEditSubscription
}

### MUTATIONS
type Mutation {
    # Login
    token(input: UserLoginInput) : String
    # User
    userAdd(input: UserAddInput): User
    userDelete(id: ID!): ID
    # Malware
    malwareAdd(input: MalwareAddInput): MalwarePayload
    malwareDelete(id: ID!): ID
    malwareEditField(input: EditInput): MalwarePayload
    malwareEditContext(input: EditContext): [EditUserContext]
}

