import { map } from 'ramda';
import uuid from 'uuid/v4';
import {
  deleteByID,
  loadByID,
  notify,
  now,
  paginate,
  takeTx
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';

export const findAll = args => paginate('match $m isa Vulnerability', args);

export const findById = vulnerabilityId => loadByID(vulnerabilityId);

export const addVulnerability = async (user, vulnerability) => {
  const wTx = await takeTx();
  const vulnerabilityIterator = await wTx.query(`insert $vulnerability isa Vulnerability 
    has type "vulnerability";
    $vulnerability has stix_id "vulnerability--${uuid()}";
    $vulnerability has stix_label "";
    $vulnerability has stix_label_lowercase "";
    $vulnerability has name "${vulnerability.name}";
    $vulnerability has description "${vulnerability.description}";
    $vulnerability has name_lowercase "${vulnerability.name.toLowerCase()}";
    $vulnerability has description_lowercase "${
      vulnerability.description ? vulnerability.description.toLowerCase() : ''
    }";
    $vulnerability has created ${now()};
    $vulnerability has modified ${now()};
    $vulnerability has revoked false;
    $vulnerability has created_at ${now()};
    $vulnerability has updated_at ${now()};
  `);
  const createVulnerability = await vulnerabilityIterator.next();
  const createdVulnerabilityId = await createVulnerability
    .map()
    .get('vulnerability').id;

  if (vulnerability.createdByRef) {
    await wTx.query(`match $from id ${createdVulnerabilityId};
         $to id ${vulnerability.createdByRef};
         insert (so: $from, creator: $to)
         isa created_by_ref;`);
  }

  if (vulnerability.markingDefinitions) {
    const createMarkingDefinition = markingDefinition =>
      wTx.query(
        `match $from id ${createdVulnerabilityId}; $to id ${markingDefinition}; insert (so: $from, marking: $to) isa object_marking_refs;`
      );
    const markingDefinitionsPromises = map(
      createMarkingDefinition,
      vulnerability.markingDefinitions
    );
    await Promise.all(markingDefinitionsPromises);
  }

  if (vulnerability.killChainPhases) {
    const createKillChainPhase = killChainPhase =>
      wTx.query(
        `match $from id ${createdVulnerabilityId}; $to id ${killChainPhase}; insert (phase_belonging: $from, kill_chain_phase: $to) isa kill_chain_phases;`
      );
    const killChainPhasesPromises = map(
      createKillChainPhase,
      vulnerability.killChainPhases
    );
    await Promise.all(killChainPhasesPromises);
  }

  await wTx.commit();

  return loadByID(createdVulnerabilityId).then(created =>
    notify(BUS_TOPICS.StixDomainEntity.ADDED_TOPIC, created, user)
  );
};

export const vulnerabilityDelete = vulnerabilityId =>
  deleteByID(vulnerabilityId);