import { head } from 'ramda';
import { offsetToCursor } from 'graphql-relay/lib/connection/arrayconnection';
import pubsub from '../config/bus';
import {
  deleteByID,
  loadAll,
  loadByID,
  qk,
  now,
  gkString
} from '../database/grakn';
import { MALWARE_ADDED_TOPIC } from '../config/conf';

export const findAll = async (first = 25, after = undefined) =>
  loadAll('Malware', first, after);

export const findById = malwareId => loadByID(malwareId);

export const addMalware = async (user, malware) => {
  const createMalware = qk(`insert $malware isa Malware 
    has type "malware";
    $malware has name "${malware.name}";
    $malware has description "${malware.description}";
    $malware has created ${now()};
    $malware has modified ${now()};
    $malware has revoked false;
  `);
  return createMalware.then(result => {
    const { data } = result;
    return findById(head(data).malware.id).then(malwareCreated => {
      pubsub.publish(MALWARE_ADDED_TOPIC, { malwareCreated });
      return {
        viewer: user,
        clientMutationId: malware.clientMutationId,
        malwareEdge: {
          cursor: offsetToCursor(0),
          node: malwareCreated
        }
      };
    });
  });
};

export const deleteMalware = malwareId => deleteByID(malwareId);

export const editMalwareInput = malwareEditInput => {
  const { id, key, value } = malwareEditInput;
  // First delete the field
  return loadByID(id, true).then(m => {
    const oldVal = m[key].type === gkString ? `"${m[key].val}"` : m[key].val;
    return Promise.all([
      qk(`match $m id ${id}; $m has ${key} ${oldVal} via $e; delete $e;`),
      qk(`match $m id ${id}; insert $m has ${key} "${value}";`)
    ]).then(() => findById(id));
  });
  // Setup the new one
};
