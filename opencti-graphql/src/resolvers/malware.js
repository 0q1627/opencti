import uuid from 'uuid/v4';
import { assoc } from 'ramda';
import { withFilter } from 'graphql-subscriptions';
import { logger, MALWARE_ADDED_TOPIC } from '../config/conf';
import {
  addMalware,
  deleteMalware,
  findAll,
  findById
} from '../domain/malware';
import pubsub from '../config/bus';
import { admin, auth } from './wrapper';

/* Test extracting the query parameters
const { selectionSet } = info.operation;
const params = computeParams(['malwares', 'edges', 'node'], selectionSet);
const computeParams = (paths, selectionSet, index = 0) => {
  let i = 0;
  // eslint-disable-next-line no-plusplus
  for (i; i < selectionSet.selections.length; i++) {
    const selection = selectionSet.selections[i];
    const name = selection.name.value;
    if (paths[index] === name) {
      if (paths.length - 1 === index) {
        return selection.selectionSet.selections.map(s => s.name.value);
      }
      const newIndex = index + 1;
      return computeParams(paths, selection.selectionSet, newIndex);
    }
  }
  throw new Error('Cant find path node');
};
*/

const malwareResolvers = {
  Query: {
    malwares: auth((_, { first, after, orderBy }) =>
      findAll(first, after, orderBy)
    ),
    malware: auth((_, { id }) => findById(id))
  },
  Subscription: {
    malwareAdded: {
      subscribe: admin((_, args, { malware }) =>
        withFilter(
          () => pubsub.asyncIterator(MALWARE_ADDED_TOPIC),
          payload => {
            if (!payload) return false; // When disconnect, an empty payload is dispatched.
            logger.debug(`${MALWARE_ADDED_TOPIC}-malware`, malware);
            logger.debug(`${MALWARE_ADDED_TOPIC}-payload`, payload);
            return true;
          }
        )(_, args, { malware })
      )
    }
  },
  Mutation: {
    malwareAdd: admin((_, { input }) => {
      const malware = assoc('id', uuid(), input);
      return addMalware(malware);
    }),
    malwareDelete: admin((_, { id }) => deleteMalware(id))
  }
};

export default malwareResolvers;
