import { head } from 'ramda';
import uuid from 'uuid/v4';
import { delEditContext, setEditContext } from '../database/redis';
import {
  createRelation,
  deleteByID,
  editInputTx,
  loadByID,
  notify,
  now,
  paginate,
  qk
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';

export const findAll = args => paginate('match $m isa Malware', args);

export const findById = malwareId => loadByID(malwareId);

export const markingDefinitions = (malwareId, args) =>
  paginate(
    `match $marking isa Marking-Definition; 
    $rel(marking:$marking, so:$malware) isa object_marking_refs; 
    $malware id ${malwareId}`,
    args
  );

export const killChainPhases = (malwareId, args) =>
  paginate(
    `match $kc isa Kill-Chain-Phase; 
    $rel(kill_chain_phase:$kc, phase_belonging:$malware) isa kill_chain_phases; 
    $malware id ${malwareId}`,
    args
  );

export const reports = (malwareId, args) =>
  paginate(
    `match $report isa Report; 
    $rel(knowledge_aggregation:$report, so:$malware) isa object_refs; 
    $malware id ${malwareId}`,
    args
  );

export const addMalware = async (user, malware) => {
  const createMalware = qk(`insert $malware isa Malware 
    has type "malware";
    $malware has stix_id "malware--${uuid()}";
    $malware has name "${malware.name}";
    $malware has description "${malware.description}";
    $malware has created ${now()};
    $malware has modified ${now()};
    $malware has revoked false;
    $malware has created_at ${now()};
    $malware has updated_at ${now()};
  `);
  return createMalware.then(result => {
    const { data } = result;
    return loadByID(head(data).malware.id).then(created =>
      notify(BUS_TOPICS.Malware.ADDED_TOPIC, created, user)
    );
  });
};

export const malwareDelete = malwareId => deleteByID(malwareId);

export const malwareDeleteRelation = relationId => deleteByID(relationId);

export const malwareAddRelation = (user, malwareId, input) =>
  createRelation(malwareId, input).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );

export const malwareCleanContext = (user, malwareId) => {
  delEditContext(user, malwareId);
  return loadByID(malwareId).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
};

export const malwareEditContext = (user, malwareId, input) => {
  setEditContext(user, malwareId, input);
  loadByID(malwareId).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
};

export const malwareEditField = (user, malwareId, input) =>
  editInputTx(malwareId, input).then(malware =>
    notify(BUS_TOPICS.Malware.EDIT_TOPIC, malware, user)
  );
