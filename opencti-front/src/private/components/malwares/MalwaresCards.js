import React, {Component} from 'react';
import {createPaginationContainer} from "react-relay";
import graphql from 'babel-plugin-relay/macro';
import {withStyles} from '@material-ui/core/styles';
import MalwareCard from "./MalwareCard";
import {AutoSizer, ColumnSizer, InfiniteLoader, Grid, WindowScroller} from "react-virtualized";

const styles = () => ({
  windowScrollerWrapper: {
    flex: '1 1 auto'
  },
  bottomPad: {
    padding: '0 0 30px 0'
  },
  rightPad: {
    padding: '0 30px 30px 0'
  },
  leftPad: {
    padding: '0 0 30px 30px'
  }
});

class MalwaresList extends Component {

  constructor(props) {
    super(props);
    this._isCellLoaded = this._isCellLoaded.bind(this);
    this._loadMore = this._loadMore.bind(this);
    this._onSectionRendered = this._onSectionRendered.bind(this);
    this._cellRenderer = this._cellRenderer.bind(this);
    this.state = {
      scrollToIndex: -1,
      showHeaderText: true,
    };
  }

  _setRef = windowScroller => {
    this._windowScroller = windowScroller;
  };

  _loadMore() {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      console.log('No more to load', this.props.relay.hasMore(), this.props.relay.isLoading())
      return;
    }

    this.props.relay.loadMore(
      16,  // Fetch the next 10 feed items
      error => {
        console.log(error);
      },
    );
  }

  _onSectionRendered({columnStartIndex, columnStopIndex, rowStartIndex, rowStopIndex}) {
    const startIndex = rowStartIndex * 4 + columnStartIndex
    const stopIndex = rowStopIndex * 4 + columnStopIndex
    this._onRowsRendered({
      startIndex,
      stopIndex
    })
  }

  _isCellLoaded({index}) {
    const list = this.props.data.malwares.edges;
    return !this.props.relay.hasMore() || index < list.length;
  }

  _cellRenderer({columnIndex, key, rowIndex, style}) {
    const {classes} = this.props
    const index = rowIndex * 4 + columnIndex;
    const list = this.props.data.malwares.edges;
    if (!this._isCellLoaded({index})) {
      return <div key={key}>'Loading...'</div>
    } else {
      const malwareNode = list[index];
      if( !malwareNode ) {
        return <div key={key} >&nbsp;</div>
      }
      const malware = malwareNode.node;
      let className = classes.bottomPad;
      switch (columnIndex) {
        case 0:
        case 1:
          className = classes.rightPad
          break;
        case 3:
          className = classes.leftPad
          break;
        default:
      }
      return <div className={className} key={key} style={style}><MalwareCard key={malware.id} malware={malware}/></div>
    }
  }

  render() {
    const {classes} = this.props
    const list = this.props.data.malwares.edges;
    const rowCount = Math.ceil(list.length / 4);
    const {scrollToIndex} = this.state;
    return (
      <WindowScroller ref={this._setRef} scrollElement={window}>
        {({height, isScrolling, registerChild, onChildScroll, scrollTop}) => (
          <div className={classes.windowScrollerWrapper}>
            <InfiniteLoader isRowLoaded={this._isCellLoaded} loadMoreRows={this._loadMore} rowCount={281}>
              {({onRowsRendered}) => {
                this._onRowsRendered = onRowsRendered
                return (
                  <AutoSizer disableHeight>
                    {({width}) => (
                      <ColumnSizer columnMaxWidth={440}
                                   columnMinWidth={150}
                                   columnCount={4}
                                   width={width}>
                        {({adjustedWidth, columnWidth, registerChild}) => (
                          <Grid
                            ref={registerChild}
                            autoHeight
                            height={height}
                            onRowsRendered={onRowsRendered}
                            isScrolling={isScrolling}
                            onScroll={onChildScroll}
                            columnWidth={columnWidth}
                            columnCount={4}
                            rowHeight={230}
                            overscanColumnCount={4}
                            overscanRowCount={10}
                            rowCount={rowCount}
                            cellRenderer={this._cellRenderer}
                            onSectionRendered={this._onSectionRendered}
                            scrollToIndex={scrollToIndex}
                            scrollTop={scrollTop}
                            width={adjustedWidth}
                          />
                        )}
                      </ColumnSizer>
                    )}
                  </AutoSizer>
                )
              }}
            </InfiniteLoader>
          </div>
        )}
      </WindowScroller>
    );
  }

}

export default withStyles(styles)(createPaginationContainer(
  MalwaresList,
  {
    data: graphql`
        fragment MalwaresCards_data on Query @argumentDefinitions(
            count: {type: "Int", defaultValue: 25}
            cursor: {type: "ID"}
            orderBy: {type: "MalwaresOrdering", defaultValue: ID}
        ) {
            malwares(
                first: $count
                after: $cursor
                orderBy: $orderBy # Non-pagination variables
            ) @connection(key: "Pagination_malwares") {
                edges {
                    node {
                        id
                        ...MalwareCard_malware
                    }
                }
            }
        }
    `,
  },
  {
    direction: 'forward',
    getConnectionFromProps(props) {
      return props.data && props.data.malwares;
    },
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, {count, cursor}, fragmentVariables) {
      return {
        count,
        cursor,
        orderBy: fragmentVariables.orderBy
      };
    },
    query: graphql`
        query MalwaresCardsPaginationQuery($count: Int!, $cursor: ID, $orderBy: MalwaresOrdering) {
            ...MalwaresCards_data @arguments(count: $count, cursor: $cursor, orderBy: $orderBy)
        }
    `
  }
));