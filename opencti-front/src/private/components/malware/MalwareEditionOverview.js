import React, { Component } from 'react';
import PropTypes from 'prop-types';
import graphql from 'babel-plugin-relay/macro';
import { commitMutation, createFragmentContainer, fetchQuery } from 'react-relay';
import { Formik, Field, Form } from 'formik';
import { withStyles } from '@material-ui/core/styles';
import {
  assoc, compose, map, pathOr, pipe, pick,
  difference, head, sortWith, ascend, path,
} from 'ramda';
import * as Yup from 'yup';
import inject18n from '../../../components/i18n';
import Autocomplete from '../../../components/Autocomplete';
import TextField from '../../../components/TextField';
import { SubscriptionFocus } from '../../../components/Subscription';
import environment from '../../../relay/environment';
import { killChainPhasesLinesSearchQuery } from '../kill_chain_phase/KillChainPhasesLines';
import { markingDefinitionsLinesSearchQuery } from '../marking_definition/MarkingDefinitionsLines';

const styles = theme => ({
  drawerPaper: {
    minHeight: '100vh',
    width: '50%',
    position: 'fixed',
    overflow: 'hidden',
    backgroundColor: theme.palette.navAlt.background,
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
    padding: '30px 30px 30px 30px',
  },
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
  importButton: {
    position: 'absolute',
    top: 30,
    right: 30,
  },
});

const malwareMutationFieldPatch = graphql`
    mutation MalwareEditionOverviewFieldPatchMutation($id: ID!, $input: EditInput!) {
        malwareEdit(id: $id) {
            fieldPatch(input: $input) {
                ...MalwareEditionOverview_malware
            }
        }
    }
`;

const malwareEditionOverviewFocus = graphql`
    mutation MalwareEditionOverviewFocusMutation($id: ID!, $input: EditContext!) {
        malwareEdit(id: $id) {
            contextPatch(input : $input) {
                ...MalwareEditionOverview_malware
            }
        }
    }
`;

const malwareMutationRelationAdd = graphql`
    mutation MalwareEditionOverviewRelationAddMutation($id: ID!, $input: RelationAddInput!) {
        malwareEdit(id: $id) {
            relationAdd(input: $input) {
                node {
                    ...MalwareEditionOverview_malware
                }
            }
        }
    }
`;

const malwareMutationRelationDelete = graphql`
    mutation MalwareEditionOverviewRelationDeleteMutation($id: ID!, $relationId: ID!) {
        malwareEdit(id: $id) {
            relationDelete(relationId: $relationId) {
                node {
                    ...MalwareEditionOverview_malware
                }
            }
        }
    }
`;

const malwareValidation = t => Yup.object().shape({
  name: Yup.string()
    .required(t('This field is required')),
  description: Yup.string()
    .min(3, t('The value is too short'))
    .max(500, t('The value is too long'))
    .required(t('This field is required')),
});

class MalwareEditionOverviewComponent extends Component {
  constructor(props) {
    super(props);
    this.state = { killChainPhases: [], markingDefinitions: [] };
  }

  searchKillChainPhases(event) {
    fetchQuery(environment, killChainPhasesLinesSearchQuery, { search: event.target.value })
      .then((data) => {
        const killChainPhases = pipe(
          pathOr([], ['killChainPhases', 'edges']),
          sortWith([ascend(path(['node', 'phase_order']))]),
          map(n => ({ label: `[${n.node.kill_chain_name}] ${n.node.phase_name}`, value: n.node.id })),
        )(data);
        this.setState({ killChainPhases });
      });
  }

  searchMarkingDefinitions(event) {
    fetchQuery(environment, markingDefinitionsLinesSearchQuery, { search: event.target.value })
      .then((data) => {
        const markingDefinitions = pipe(
          pathOr([], ['markingDefinitions', 'edges']),
          map(n => ({ label: n.node.definition, value: n.node.id })),
        )(data);
        this.setState({ markingDefinitions });
      });
  }

  handleChangeFocus(name) {
    commitMutation(environment, {
      mutation: malwareEditionOverviewFocus,
      variables: {
        id: this.props.malware.id,
        input: {
          focusOn: name,
        },
      },
    });
  }

  handleSubmitField(name, value) {
    malwareValidation(this.props.t).validateAt(name, { [name]: value }).then(() => {
      commitMutation(environment, {
        mutation: malwareMutationFieldPatch,
        variables: { id: this.props.malware.id, input: { key: name, value } },
      });
    }).catch(() => false);
  }

  handleChangeKillChainPhases(name, values) {
    const { malware } = this.props;
    const currentKillChainPhases = pipe(
      pathOr([], ['killChainPhases', 'edges']),
      map(n => ({ label: `[${n.node.kill_chain_name}] ${n.node.phase_name}`, value: n.node.id, relationId: n.relation.id })),
    )(malware);

    const added = difference(values, currentKillChainPhases);
    const removed = difference(currentKillChainPhases, values);

    if (added.length > 0) {
      commitMutation(environment, {
        mutation: malwareMutationRelationAdd,
        variables: {
          id: head(added).value,
          input: {
            fromRole: 'kill_chain_phase',
            toId: this.props.malware.id,
            toRole: 'phase_belonging',
            through: 'kill_chain_phases',
          },
        },
      });
    }

    if (removed.length > 0) {
      commitMutation(environment, {
        mutation: malwareMutationRelationDelete,
        variables: {
          id: this.props.malware.id,
          relationId: head(removed).relationId,
        },
      });
    }
  }

  handleChangeMarkingDefinition(name, values) {
    const { malware } = this.props;
    const currentMarkingDefinitions = pipe(
      pathOr([], ['markingDefinitions', 'edges']),
      map(n => ({ label: n.node.definition, value: n.node.id, relationId: n.relation.id })),
    )(malware);

    const added = difference(values, currentMarkingDefinitions);
    const removed = difference(currentMarkingDefinitions, values);

    if (added.length > 0) {
      commitMutation(environment, {
        mutation: malwareMutationRelationAdd,
        variables: {
          id: head(added).value,
          input: {
            fromRole: 'marking',
            toId: this.props.malware.id,
            toRole: 'so',
            through: 'object_marking_refs',
          },
        },
      });
    }

    if (removed.length > 0) {
      commitMutation(environment, {
        mutation: malwareMutationRelationDelete,
        variables: {
          id: this.props.malware.id,
          relationId: head(removed).relationId,
        },
      });
    }
  }

  render() {
    const {
      t, malware, editUsers, me,
    } = this.props;
    const killChainPhases = pipe(
      pathOr([], ['killChainPhases', 'edges']),
      map(n => ({ label: `[${n.node.kill_chain_name}] ${n.node.phase_name}`, value: n.node.id, relationId: n.relation.id })),
    )(malware);
    const markingDefinitions = pipe(
      pathOr([], ['markingDefinitions', 'edges']),
      map(n => ({ label: n.node.definition, value: n.node.id, relationId: n.relation.id })),
    )(malware);
    const initialValues = pipe(
      assoc('killChainPhases', killChainPhases),
      assoc('markingDefinitions', markingDefinitions),
      pick(['name', 'description', 'killChainPhases', 'markingDefinitions']),
    )(malware);
    return (
      <div>
        <Formik
          enableReinitialize={true}
          initialValues={initialValues}
          validationSchema={malwareValidation(t)}
          render={() => (
            <Form style={{ margin: '20px 0 20px 0' }}>
              <Field name='name' component={TextField} label={t('Name')} fullWidth={true}
                     onFocus={this.handleChangeFocus.bind(this)}
                     onSubmit={this.handleSubmitField.bind(this)}
                     helperText={<SubscriptionFocus me={me} users={editUsers} fieldName='name'/>}/>
              <Field name='description' component={TextField} label={t('Description')}
                     fullWidth={true} multiline={true} rows='4' style={{ marginTop: 10 }}
                     onFocus={this.handleChangeFocus.bind(this)}
                     onSubmit={this.handleSubmitField.bind(this)}
                     helperText={<SubscriptionFocus me={me} users={editUsers} fieldName='description'/>}/>
              <Field
                name='killChainPhases'
                component={Autocomplete}
                multiple={true}
                label={t('Kill chain phases')}
                options={this.state.killChainPhases}
                onInputChange={this.searchKillChainPhases.bind(this)}
                onChange={this.handleChangeKillChainPhases.bind(this)}
                onFocus={this.handleChangeFocus.bind(this)}
                helperText={<SubscriptionFocus me={me} users={editUsers} fieldName='killChainPhases'/>}
              />
              <Field
                name='markingDefinitions'
                component={Autocomplete}
                multiple={true}
                label={t('Marking')}
                options={this.state.markingDefinitions}
                onInputChange={this.searchMarkingDefinitions.bind(this)}
                onChange={this.handleChangeMarkingDefinition.bind(this)}
                onFocus={this.handleChangeFocus.bind(this)}
                helperText={<SubscriptionFocus me={me} users={editUsers} fieldName='markingDefinitions'/>}
              />
            </Form>
          )}
        />
      </div>
    );
  }
}

MalwareEditionOverviewComponent.propTypes = {
  classes: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
  malware: PropTypes.object,
  editUsers: PropTypes.array,
  me: PropTypes.object,
};

const MalwareEditionOverview = createFragmentContainer(MalwareEditionOverviewComponent, {
  malware: graphql`
      fragment MalwareEditionOverview_malware on Malware {
          id
          name
          description
          killChainPhases {
              edges {
                  node {
                      id
                      kill_chain_name
                      phase_name
                      phase_order
                  }
                  relation {
                      id
                  }
              }
          }
          markingDefinitions {
              edges {
                  node {
                      id
                      definition
                      definition_type
                  }
                  relation {
                      id
                  }
              }
          }
      }
  `,
});

export default compose(
  inject18n,
  withStyles(styles, { withTheme: true }),
)(MalwareEditionOverview);
