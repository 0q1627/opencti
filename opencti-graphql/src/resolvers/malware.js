import { withFilter } from 'graphql-subscriptions';
import { logger, BUS_TOPICS } from '../config/conf';
import {
  addMalware,
  deleteMalware,
  findAll,
  findById,
  findMarkingDefinition,
  malwareEditContext,
  malwareEditField
} from '../domain/malware';
import { pubsub } from '../database/redis';
import { admin, auth } from './wrapper';

const malwareResolvers = {
  Query: {
    malware: auth((_, { id }) => findById(id)),
    malwares: auth((_, { first, after, orderBy, orderMode }) =>
      findAll(first, after, orderBy, orderMode)
    )
  },
  Malware: {
    markingDefinition: malware => findMarkingDefinition(malware)
  },
  Mutation: {
    malwareAdd: admin((_, { input }, { user }) => addMalware(user, input)),
    malwareDelete: admin((_, { id }) => deleteMalware(id)),
    malwareEditField: admin((_, { input }, { user }) =>
      malwareEditField(user, input)
    ),
    malwareEditContext: admin((_, { input }, { user }) =>
      malwareEditContext(user, input)
    )
  },
  Subscription: {
    malwareEdit: {
      resolve: payload => ({ malware: payload.data, context: [] }),
      subscribe: admin((_, args, { user }) =>
        withFilter(
          () => pubsub.asyncIterator(BUS_TOPICS.Malware.EDIT_TOPIC),
          payload => {
            if (!payload) return false; // When disconnect, an empty payload is dispatched.
            logger.debug(`${BUS_TOPICS.Malware.EDIT_TOPIC}-user`, user);
            logger.debug(`${BUS_TOPICS.Malware.EDIT_TOPIC}-payload`, payload);
            return true;
          }
        )(_, args, { user })
      )
    }
  }
};

export default malwareResolvers;
