### Directives
directive @constraint(
    # String constraints
    minLength: Int
    maxLength: Int
    startsWith: String
    endsWith: String
    notContains: String
    pattern: String
    format: String

    # Number constraints
    min: Int
    max: Int
    exclusiveMin: Int
    exclusiveMax: Int
    multipleOf: Int
) on INPUT_FIELD_DEFINITION

### Scalar
scalar DateTime

### Relations
type RelationEmbedded {
    id: ID!
    type: String!
}

type RelationData {
    node: GlobalObject
    relation: RelationEmbedded
}

type createdByRef {
    node: Identity
    relation: RelationEmbedded
}

### Relay
type PageInfo {
    startCursor: String!,
    endCursor: String!,
    hasNextPage: Boolean!,
    hasPreviousPage: Boolean!,
    globalCount: Int!
}
enum OrderingMode {
    asc,
    desc
}

### Edit
input EditInput {
    id: ID # ID of the instance in edition
    key: String! # Field name to change
    value: [String]! # Values to apply
}
input EditContext {
    focusOn: String! # Field name
}
type EditUserContext {
    name: String!
    focusOn: String # Field name
}

### Settings
type Settings {
    id: ID!
    platform_title: String
    platform_email: String
    platform_url: String
    platform_language: String
    platform_external_auth: Boolean
    platform_registration: Boolean
    editContext: [EditUserContext]
    created_at: DateTime
    updated_at: DateTime
}
input SettingsAddInput {
    platform_title: String
    platform_email: String
    platform_url: String
    platform_language: String
    platform_external_auth: Boolean
    platform_registration: Boolean
}

### Global objects
interface GlobalObject {
    id: ID!
    type: String!
}

### STIX objects
enum StixDomainEntitiesOrdering {
    name,
    created_at,
    updated_at
}
type StixDomainEntityConnection {
    pageInfo: PageInfo!
    edges: [StixDomainEntityEdge]
}
type StixDomainEntityEdge {
    cursor: String!
    node: StixDomainEntity!
    relation: RelationEmbedded!
}
interface StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    description: String
    created_at: DateTime!
    updated_at: DateTime!
}
input StixDomainEntityAddInput  {
    name: String!
    description: String
    type: String!
    markingDefinitions: [String]
    clientMutationId: String
}

### STIX relations
enum StixRelationsOrdering {
    stix_id,
    relationship_type,
    weight,
    first_seen,
    last_seen,
    created,
    modified,
    created_at,
    updated_at
}
type StixRelationConnection {
    pageInfo: PageInfo!
    edges: [StixRelationEdge]
}
type StixRelationEdge {
    cursor: String!
    node: StixRelation!
    from: StixDomainEntity
    to: StixDomainEntity
}
type StixRelation {
    id: ID!
    relationship_type: String
    weight: Int
    description: String
    first_seen: DateTime
    last_seen: DateTime
    created: DateTime
    modified: DateTime
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime
    updated_at: DateTime
}
input StixRelationAddInput  {
    fromId: String!
    fromRole: String!
    toId: String!
    toRole: String!
    relationship_type: String!
    weight: Int
    description: String
    first_seen: DateTime
    last_seen: DateTime
    markingDefinitions: [String]
    clientMutationId: String
}

### Identities
enum IdentitiesOrdering {
    stix_id,
    name,
    created_at,
    updated_at
}
type IdentityConnection {
    pageInfo: PageInfo!
    edges: [IdentityEdge]
}
type IdentityEdge {
    cursor: String!
    node: Identity!
}
interface Identity {
    id: ID!
    type: String!
    name: String!
    description: String
}
input IdentityAddInput  {
    name: String!
    description: String
    type: String!
    markingDefinitions: [String]
    clientMutationId: String
}

### User
enum UsersOrdering {
    name,
    email,
    firstname,
    lastname,
    created_at,
    updated_at
}
enum UserRole {
    ROLE_ROOT
    ROLE_ADMIN
    ROLE_USER
}
type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]
}
type UserEdge {
    cursor: String!
    node: User!
}
type User implements GlobalObject & StixDomainEntity & Identity {
    id: ID!
    type: String!
    name: String!
    description: String
    firstname: String
    lastname: String
    email: String
    language: String
    grant: [String]
    created: DateTime
    modified: DateTime
    editContext: [EditUserContext]
    groups: GroupConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input UserAddInput {
    email: String! @constraint(minLength: 5, format: "email")
    name: String!  @constraint(minLength: 3)
    description: String
    firstname: String
    lastname: String
    language: String
    grant: [UserRole]
}
input UserLoginInput {
    email: String!
    password: String!
}

### Organizations
enum OrganizationsOrdering {
    stix_id,
    name,
    description,
    created,
    modified,
    created_at,
    updated_at
}
type OrganizationConnection {
    pageInfo: PageInfo!
    edges: [OrganizationEdge]
}
type OrganizationEdge {
    cursor: String!
    node: Organization!
}
type Organization implements GlobalObject & StixDomainEntity & Identity {
    id: ID!
    type: String!
    name: String!
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input OrganizationAddInput  {
    name: String!
    description: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Sectors
enum SectorsOrdering {
    stix_id,
    name,
    description,
    created,
    modified,
    created_at,
    updated_at
}
type SectorConnection {
    pageInfo: PageInfo!
    edges: [SectorEdge]
}
type SectorEdge {
    cursor: String!
    node: Sector!
}
type Sector implements GlobalObject & StixDomainEntity & Identity {
    id: ID!
    type: String!
    name: String!
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input SectorAddInput  {
    name: String!
    description: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Cities
enum CitiesOrdering {
    stix_id,
    name,
    description,
    created,
    modified,
    created_at,
    updated_at
}
type CityConnection {
    pageInfo: PageInfo!
    edges: [CityEdge]
}
type CityEdge {
    cursor: String!
    node: City!
}
type City implements GlobalObject & StixDomainEntity & Identity {
    id: ID!
    type: String!
    name: String!
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input CityAddInput  {
    name: String!
    description: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Countries
enum CountriesOrdering {
    stix_id,
    name,
    description,
    created,
    modified,
    created_at,
    updated_at
}
type CountryConnection {
    pageInfo: PageInfo!
    edges: [CountryEdge]
}
type CountryEdge {
    cursor: String!
    node: Country!
}
type Country implements GlobalObject & StixDomainEntity & Identity {
    id: ID!
    type: String!
    name: String!
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input CountryAddInput  {
    name: String!
    description: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Group
enum GroupsOrdering {
    name,
    created_at,
    updated_at
}
type GroupConnection {
    pageInfo: PageInfo!
    edges: [GroupEdge]
}
type GroupEdge {
    cursor: String!
    node: Group!
    relation: RelationEmbedded!
}
type Group implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    description: String
    editContext: [EditUserContext]
    members: UserConnection
    permissions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input GroupAddInput {
    name: String!
    description: String
    clientMutationId: String
}

### Marking definitions
enum MarkingDefinitionsOrdering {
    stix_id,
    definition_type,
    definition,
    level,
    color,
    created,
    modified,
    created_at,
    updated_at
}
type MarkingDefinitionConnection {
    pageInfo: PageInfo!
    edges: [MarkingDefinitionEdge]
}

type MarkingDefinitionEdge {
    cursor: String!
    node: MarkingDefinition!
    relation: RelationEmbedded!
}
type MarkingDefinition implements GlobalObject {
    id: ID!
    type: String!
    definition_type: String!
    definition: String!
    level: Int
    color: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    created_at: DateTime!
    updated_at: DateTime!
}
input MarkingDefinitionAddInput {
    definition_type: String!
    definition: String!
    level: Int!
    color: String!
    clientMutationId: String
}

### ExternalReferences
enum ExternalReferencesOrdering {
    stix_id,
    source_name,
    url,
    hash,
    external_id,
    created,
    modified,
    created_at,
    updated_at
}
type ExternalReferenceConnection {
    pageInfo: PageInfo!
    edges: [ExternalReferenceEdge]
}

type ExternalReferenceEdge {
    cursor: String!
    node: ExternalReference!
    relation: RelationEmbedded!
}
type ExternalReference implements GlobalObject {
    id: ID!
    type: String!
    source_name: String!
    description: String
    url: String
    hash: String
    external_id: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    created_at: DateTime!
    updated_at: DateTime!
}
input ExternalReferenceAddInput {
    source_name: String!
    description: String
    url: String
    hash: String
    external_id: String
    clientMutationId: String
}

### KillChain Phases
enum KillChainPhasesOrdering {
    stix_id,
    phase_order,
    kill_chain_name,
    phase_name,
    created_at,
    updated_at
}
type KillChainPhaseConnection {
    pageInfo: PageInfo!
    edges: [KillChainPhaseEdge]
}
type KillChainPhaseEdge {
    cursor: String!
    node: KillChainPhase!
    relation: RelationEmbedded!
}
type KillChainPhase implements GlobalObject {
    id: ID!
    type: String!
    kill_chain_name: String!
    phase_name: String!
    phase_order: Int
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input KillChainPhaseAddInput {
    kill_chain_name: String!
    phase_name: String!
    phase_order: Int!
}

### AttackPattern
enum AttackPatternsOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type AttackPatternConnection {
    pageInfo: PageInfo!
    edges: [MalwareEdge]
}
type AttackPatternEdge {
    cursor: String!
    node: AttackPattern!
}
type AttackPattern implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    killChainPhases: KillChainPhaseConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input AttackPatternAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    killChainPhases: [String]
    clientMutationId: String
}

### CourseOfAction
enum CourseOfActionsOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type CourseOfActionConnection {
    pageInfo: PageInfo!
    edges: [CourseOfActionEdge]
}
type CourseOfActionEdge {
    cursor: String!
    node: Malware!
}
type CourseOfAction implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input CourseOfActionAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    clientMutationId: String
}

### Threat Actors
enum ThreatActorsOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type ThreatActorConnection {
    pageInfo: PageInfo!
    edges: [ThreatActorEdge]
}
type ThreatActorEdge {
    cursor: String!
    node: ThreatActor!
}
type ThreatActor implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    alias: [String]
    stix_role: String
    goal: String
    sophistication: String
    resource_level: String
    primary_motivation: String
    secondary_motivation: [String]
    personal_motivation: String
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input ThreatActorAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    clientMutationId: String
}

### IntrusionSets
enum IntrusionSetsOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type IntrusionSetConnection {
    pageInfo: PageInfo!
    edges: [IntrusionSetEdge]
}
type IntrusionSetEdge {
    cursor: String!
    node: IntrusionSet!
}
type IntrusionSet implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    alias: [String]
    description: String
    first_seen: DateTime
    last_seen: DateTime
    goal: String
    resource_level: String
    primary_motivation: String
    secondary_motivation: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input IntrusionSetAddInput {
    name: String!
    description: String!
    clientMutationId: String
}

### Campaign
enum CampaignsOrdering {
    stix_id,
    name,
    first_seen,
    last_seen,
    created,
    modified,
    created_at,
    updated_at
}
type CampaignConnection {
    pageInfo: PageInfo!
    edges: [CampaignEdge]
}
type CampaignEdge {
    cursor: String!
    node: Campaign!
}
type Campaign implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    alias: [String]
    description: String
    first_seen: DateTime
    last_seen: DateTime
    objective: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input CampaignAddInput {
    name: String!
    description: String!
    first_seen: DateTime
    last_seen: DateTime
    objective: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Incident
enum IncidentsOrdering {
    stix_id,
    name,
    first_seen,
    last_seen,
    created,
    modified,
    created_at,
    updated_at
}
type IncidentConnection {
    pageInfo: PageInfo!
    edges: [MalwareEdge]
}
type IncidentEdge {
    cursor: String!
    node: Incident!
}
type Incident implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    first_seen: DateTime
    last_seen: DateTime
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input IncidentAddInput {
    name: String!
    description: String!
    first_seen: DateTime
    last_seen: DateTime
    markingDefinitions: [String]
    clientMutationId: String
}

### Malware
enum MalwaresOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type MalwareConnection {
    pageInfo: PageInfo!
    edges: [MalwareEdge]
}
type MalwareEdge {
    cursor: String!
    node: Malware!
}
type Malware implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    killChainPhases: KillChainPhaseConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input MalwareAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    killChainPhases: [String]
    clientMutationId: String
}

### Tool
enum ToolsOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type ToolConnection {
    pageInfo: PageInfo!
    edges: [ToolEdge]
}
type ToolEdge {
    cursor: String!
    node: Tool!
}
type Tool implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    tool_version: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    killChainPhases: KillChainPhaseConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input ToolAddInput {
    name: String!
    description: String!
    tool_version: String
    markingDefinitions: [String]
    killChainPhases: [String]
    clientMutationId: String
}

### Vulnerability
enum VulnerabilitiesOrdering {
    stix_id,
    name,
    created,
    modified,
    created_at,
    updated_at
}
type VulnerabilityConnection {
    pageInfo: PageInfo!
    edges: [VulnerabilityEdge]
}
type VulnerabilityEdge {
    cursor: String!
    node: Vulnerability!
}
type Vulnerability implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    stix_label: [String]
    description: String
    created: DateTime
    modified: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    reports: ReportConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input VulnerabilityAddInput {
    name: String!
    description: String!
    markingDefinitions: [String]
    clientMutationId: String
}

### Reports
enum ReportsOrdering {
    stix_id,
    name,
    created,
    modified,
    published,
    createdByRef,
    created_at,
    updated_at
}
type ReportConnection {
    pageInfo: PageInfo!
    edges: [ReportEdge]
}
type ReportEdge {
    cursor: String!
    node: Report!
    relation: RelationEmbedded!
}
type ReportPayload {
    reportEdge: ReportEdge
}
type Report implements GlobalObject & StixDomainEntity {
    id: ID!
    type: String!
    name: String!
    description: String
    report_class: String
    graph_data: String
    created: DateTime
    modified: DateTime
    published: DateTime
    revoked: Boolean
    editContext: [EditUserContext]
    createdByRef: createdByRef
    markingDefinitions: MarkingDefinitionConnection
    objectRefs: StixDomainEntityConnection
    created_at: DateTime!
    updated_at: DateTime!
}
input ReportAddInput {
    name: String!
    description: String
    published: DateTime
    report_class: String
    graph_data: String
    createdByRef: String
    markingDefinitions: [String]
    clientMutationId: String
}

### Relations
input RelationAddInput {
    fromRole: String!
    toId: ID!
    toRole: String!
    through: String!
}

### QUERIES
type Query {
    # Settings
    settings: Settings
    # StixDomainEntities
    stixDomainEntity(id: String!): StixDomainEntity
    stixDomainEntities(first: Int, after: ID, orderBy: StixDomainEntitiesOrdering, orderMode: OrderingMode, search: String): StixDomainEntityConnection
    # StixRelations
    stixRelation(id: String!): StixRelation
    stixRelations(fromId: String, toId: String, first: Int, after: ID, orderBy: StixRelationsOrdering, orderMode: OrderingMode, search: String): StixRelationConnection
    # Identities
    identity(id: String!): Identity
    identities(first: Int, after: ID, orderBy: IdentitiesOrdering, orderMode: OrderingMode, search: String): IdentityConnection
    # Users
    me: User
    user(id: String!): User
    users(first: Int, after: ID, orderBy: UsersOrdering, orderMode: OrderingMode, search: String): UserConnection
    # Organizations
    organization(id: String!): Organization
    organizations(first: Int, after: ID, orderBy: IdentitiesOrdering, orderMode: OrderingMode, search: String): OrganizationConnection
    # Sectors
    sector(id: String!): Sector
    sectors(first: Int, after: ID, orderBy: IdentitiesOrdering, orderMode: OrderingMode, search: String): SectorConnection
    # Cities
    city(id: String!): City
    cities(first: Int, after: ID, orderBy: CitiesOrdering, orderMode: OrderingMode, search: String): CityConnection
    # Countries
    country(id: String!): Country
    countries(first: Int, after: ID, orderBy: CountriesOrdering, orderMode: OrderingMode, search: String): CountryConnection
    # Groups
    group(id: String!): Group
    groups(first: Int, after: ID, orderBy: GroupsOrdering, orderMode: OrderingMode, search: String): GroupConnection
    # MarkingDefinitions
    markingDefinition(id: String!): MarkingDefinition
    markingDefinitions(first: Int, after: ID, orderBy: MarkingDefinitionsOrdering, orderMode: OrderingMode, search: String): MarkingDefinitionConnection
    # ExternalReferences
    externalReference(id: String!): ExternalReference
    externalReferences(first: Int, after: ID, orderBy: ExternalReferencesOrdering, orderMode: OrderingMode, search: String): ExternalReferenceConnection
    externalReferencesOf(objectId: String!, first: Int, after: ID, orderBy: ExternalReferencesOrdering, orderMode: OrderingMode, search: String): ExternalReferenceConnection
    # KillChainPhases
    killChainPhase(id: String!): KillChainPhase
    killChainPhases(first: Int, after: ID, orderBy: KillChainPhasesOrdering, orderMode: OrderingMode, search: String): KillChainPhaseConnection
    # AttackPatterns
    attackPattern(id: String!): AttackPattern
    attackPatterns(first: Int, after: ID, orderBy: AttackPatternsOrdering, orderMode: OrderingMode, search: String): AttackPatternConnection
    # CourseOfActions
    courseOfAction(id: String!): CourseOfAction
    courseOfActions(first: Int, after: ID, orderBy: CourseOfActionsOrdering, orderMode: OrderingMode, search: String): CourseOfActionConnection
    # ThreatActors
    threatActor(id: String!): ThreatActor
    threatActors(first: Int, after: ID, orderBy: ThreatActorsOrdering, orderMode: OrderingMode, search: String): ThreatActorConnection
    # IntursionSets
    intrusionSet(id: String!): IntrusionSet
    intrusionSets(first: Int, after: ID, orderBy: IntrusionSetsOrdering, orderMode: OrderingMode, search: String): IntrusionSetConnection
    # Campaigns
    campaign(id: String!): Campaign
    campaigns(first: Int, after: ID, orderBy: CampaignsOrdering, orderMode: OrderingMode, search: String): CampaignConnection
    # Incidents
    incident(id: String!): Incident
    incidents(first: Int, after: ID, orderBy: IncidentsOrdering, orderMode: OrderingMode, search: String): IncidentConnection
    # Malwares
    malware(id: String!): Malware
    malwares(first: Int, after: ID, orderBy: MalwaresOrdering, orderMode: OrderingMode, search: String): MalwareConnection
    # Tools
    tool(id: String!): Tool
    tools(first: Int, after: ID, orderBy: ToolsOrdering, orderMode: OrderingMode, search: String): ToolConnection
    # Vulnerabilities
    vulnerability(id: String!): Tool
    vulnerabilities(first: Int, after: ID, orderBy: VulnerabilitiesOrdering, orderMode: OrderingMode, search: String): VulnerabilityConnection
    # Reports
    report(id: String!): Report
    reports(first: Int, after: ID, orderBy: ReportsOrdering, orderMode: OrderingMode, search: String): ReportConnection
    reportsOf(objectId: String!, first: Int, after: ID, orderBy: ReportsOrdering, orderMode: OrderingMode, search: String): ReportConnection
}

### SUBSCRIPTIONS
type Subscription {
    settings(id: ID!): Settings
    stixDomainEntity(id: ID!): StixDomainEntity
    stixRelation(id: ID!): StixRelation
    identity(id: ID!): Identity
    user(id: ID!): User
    organization(id: ID!): Organization
    sector(id: ID!): Sector
    city(id: ID!): City
    country(id: ID!): Country
    group(id: ID!): Group
    markingDefinition(id: ID!): MarkingDefinition
    externalReference(id: ID!): ExternalReference
    killChainPhase(id: ID!): KillChainPhase
    attackPattern(id: ID!): AttackPattern
    courseOfAction(id: ID!): CourseOfAction
    threatActor(id: ID!): ThreatActor
    intrusionSet(id: ID!): IntrusionSet
    campaign(id: ID!): Campaign
    incident(id: ID!): Incident
    malware(id: ID!): Malware
    tool(id: ID!): Tool
    vulnerability(id: ID!): Vulnerability
    report(id: ID!): Report
}

### MUTATIONS
# Settings
type SettingsEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Settings
    contextPatch(input: EditContext): Settings
}

# StixDomain
type StixDomainEntityEditMutations {
    delete: ID
    fieldPatch(input: EditInput): StixDomainEntity
    contextPatch(input: EditContext): StixDomainEntity
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# StixRelation
type StixRelationEditMutations {
    delete: ID
    fieldPatch(input: EditInput): StixRelation
    contextPatch(input: EditContext): StixRelation
}

# Identity
type IdentityEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Identity
    contextPatch(input: EditContext): Identity
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# User
type UserEditMutations {
    delete: ID
    fieldPatch(input: EditInput): User
    contextPatch(input: EditContext): User
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# Organization
type OrganizationEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Organization
    contextPatch(input: EditContext): Organization
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# Sector
type SectorEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Sector
    contextPatch(input: EditContext): Sector
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# City
type CityEditMutations {
    delete: ID
    fieldPatch(input: EditInput): City
    contextPatch(input: EditContext): City
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# Country
type CountryEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Country
    contextPatch(input: EditContext): Country
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# Group
type GroupEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Group
    contextPatch(input: EditContext): Group
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# MarkingDefinition
type MarkingDefinitionEditMutations {
    delete: ID
    fieldPatch(input: EditInput): MarkingDefinition
    contextPatch(input: EditContext): MarkingDefinition
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# ExternalReference
type ExternalReferenceEditMutations {
    delete: ID
    fieldPatch(input: EditInput): ExternalReference
    contextPatch(input: EditContext): ExternalReference
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# KillChainPhase
type KillChainPhaseEditMutations {
    delete: ID
    fieldPatch(input: EditInput): KillChainPhase
    contextPatch(input: EditContext): KillChainPhase
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# AttackPattern
type AttackPatternEditMutations {
    delete: ID
    fieldPatch(input: EditInput): AttackPattern
    contextPatch(input: EditContext): AttackPattern
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# CourseOfAction
type CourseOfActionEditMutations {
    delete: ID
    fieldPatch(input: EditInput): CourseOfAction
    contextPatch(input: EditContext): CourseOfAction
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# ThreatActor
type ThreatActorEditMutations {
    delete: ID
    fieldPatch(input: EditInput): ThreatActor
    contextPatch(input: EditContext): ThreatActor
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# IntrusionSet
type IntrusionSetEditMutations {
    delete: ID
    fieldPatch(input: EditInput): IntrusionSet
    contextPatch(input: EditContext): IntrusionSet
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId: ID!): RelationData
}

# Campaign
type CampaignEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Campaign
    contextPatch(input: EditContext): Campaign
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Incident
type IncidentEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Incident
    contextPatch(input: EditContext): Incident
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Malware
type MalwareEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Malware
    contextPatch(input: EditContext): Malware
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Tool
type ToolEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Tool
    contextPatch(input: EditContext): Tool
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Vulnerability
type VulnerabilityEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Vulnerability
    contextPatch(input: EditContext): Vulnerability
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Report
type ReportEditMutations {
    delete: ID
    fieldPatch(input: EditInput): Report
    contextPatch(input: EditContext): Report
    relationAdd(input: RelationAddInput): RelationData
    relationDelete(relationId:ID!): RelationData
}

# Mutations

type Mutation {
    # Settings
    settingsAdd(input: SettingsAddInput): Settings
    settingsEdit(id: ID!): SettingsEditMutations
    # Login
    token(input: UserLoginInput) : String
    # StixDomainEntity
    stixDomainEntityAdd(input: StixDomainEntityAddInput): StixDomainEntity
    stixDomainEntityEdit(id: ID!): StixDomainEntityEditMutations
    # StixRelation
    stixRelationAdd(input: StixRelationAddInput): StixRelation
    stixRelationEdit(id: ID!): StixRelationEditMutations
    # Identity
    identityAdd(input: IdentityAddInput): Identity
    identityEdit(id: ID!): IdentityEditMutations
    # User
    userAdd(input: UserAddInput): User
    userEdit(id: ID!): UserEditMutations
    # Organization
    organizationAdd(input: OrganizationAddInput): Organization
    organizationEdit(id: ID!): OrganizationEditMutations
    # Sector
    sectorAdd(input: SectorAddInput): Sector
    sectorEdit(id: ID!): SectorEditMutations
    # City
    cityAdd(input: CityAddInput): City
    cityEdit(id: ID!): CityEditMutations
    # Country
    countryAdd(input: CountryAddInput): Country
    countryEdit(id: ID!): CountryEditMutations
    # Group
    groupAdd(input: GroupAddInput): Group
    groupEdit(id: ID!): GroupEditMutations
    # MarkingDefinition
    markingDefinitionAdd(input: MarkingDefinitionAddInput): MarkingDefinition
    markingDefinitionEdit(id: ID!): MarkingDefinitionEditMutations
    # ExternalReference
    externalReferenceAdd(input: ExternalReferenceAddInput): ExternalReference
    externalReferenceEdit(id: ID!): ExternalReferenceEditMutations
    # KillChainPhase
    killChainPhaseAdd(input: KillChainPhaseAddInput): KillChainPhase
    killChainPhaseEdit(id: ID!): KillChainPhaseEditMutations
    # AttackPattern
    attackPatternAdd(input: AttackPatternAddInput): AttackPattern
    attackPatternEdit(id: ID!): AttackPatternEditMutations
    # CourseOfAction
    courseOfActionAdd(input: CourseOfActionAddInput): CourseOfAction
    courseOfActionEdit(id: ID!): CourseOfActionEditMutations
    # ThreatActor
    threatActorAdd(input: ThreatActorAddInput): ThreatActor
    threatActorEdit(id: ID!): ThreatActorEditMutations
    # IntrusionSet
    intrusionSetAdd(input: IntrusionSetAddInput): IntrusionSet
    intrusionSetEdit(id: ID!): IntrusionSetEditMutations
    # Campaign
    campaignAdd(input: CampaignAddInput): Campaign
    campaignEdit(id: ID!): CampaignEditMutations
    # Incident
    incidentAdd(input: IncidentAddInput): Incident
    incidentEdit(id: ID!): IncidentEditMutations
    # Malware
    malwareAdd(input: MalwareAddInput): Malware
    malwareEdit(id: ID!): MalwareEditMutations
    # Tool
    toolAdd(input: ToolAddInput): Tool
    toolEdit(id: ID!): ToolEditMutations
    # Vulnerability
    vulnerabilityAdd(input: VulnerabilityAddInput): Vulnerability
    vulnerabilityEdit(id: ID!): VulnerabilityEditMutations
    # Report
    reportAdd(input: ReportAddInput): Report
    reportEdit(id: ID!): ReportEditMutations
}